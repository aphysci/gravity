// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `GravityDataProductPB.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:gravity.GravityDataProductPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GravityDataProductPB {
    // message fields
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.timestamp)
    pub timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.dataProductID)
    pub dataProductID: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.softwareVersion)
    pub softwareVersion: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.data)
    pub data: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.componentID)
    pub componentID: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.domain)
    pub domain: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.future_response)
    pub future_response: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.future_socket_url)
    pub future_socket_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.received_timestamp)
    pub received_timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.is_cached_dataproduct)
    pub is_cached_dataproduct: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.is_relayed_dataproduct)
    pub is_relayed_dataproduct: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.protocol)
    pub protocol: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.type_name)
    pub type_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:gravity.GravityDataProductPB.registration_time)
    pub registration_time: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:gravity.GravityDataProductPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GravityDataProductPB {
    fn default() -> &'a GravityDataProductPB {
        <GravityDataProductPB as ::protobuf::Message>::default_instance()
    }
}

impl GravityDataProductPB {
    pub fn new() -> GravityDataProductPB {
        ::std::default::Default::default()
    }

    // optional uint64 timestamp = 1;

    pub fn timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional string dataProductID = 2;

    pub fn dataProductID(&self) -> &str {
        match self.dataProductID.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_dataProductID(&mut self) {
        self.dataProductID = ::std::option::Option::None;
    }

    pub fn has_dataProductID(&self) -> bool {
        self.dataProductID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dataProductID(&mut self, v: ::std::string::String) {
        self.dataProductID = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataProductID(&mut self) -> &mut ::std::string::String {
        if self.dataProductID.is_none() {
            self.dataProductID = ::std::option::Option::Some(::std::string::String::new());
        }
        self.dataProductID.as_mut().unwrap()
    }

    // Take field
    pub fn take_dataProductID(&mut self) -> ::std::string::String {
        self.dataProductID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string softwareVersion = 3;

    pub fn softwareVersion(&self) -> &str {
        match self.softwareVersion.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_softwareVersion(&mut self) {
        self.softwareVersion = ::std::option::Option::None;
    }

    pub fn has_softwareVersion(&self) -> bool {
        self.softwareVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_softwareVersion(&mut self, v: ::std::string::String) {
        self.softwareVersion = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_softwareVersion(&mut self) -> &mut ::std::string::String {
        if self.softwareVersion.is_none() {
            self.softwareVersion = ::std::option::Option::Some(::std::string::String::new());
        }
        self.softwareVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_softwareVersion(&mut self) -> ::std::string::String {
        self.softwareVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes data = 4;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string componentID = 5;

    pub fn componentID(&self) -> &str {
        match self.componentID.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_componentID(&mut self) {
        self.componentID = ::std::option::Option::None;
    }

    pub fn has_componentID(&self) -> bool {
        self.componentID.is_some()
    }

    // Param is passed by value, moved
    pub fn set_componentID(&mut self, v: ::std::string::String) {
        self.componentID = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_componentID(&mut self) -> &mut ::std::string::String {
        if self.componentID.is_none() {
            self.componentID = ::std::option::Option::Some(::std::string::String::new());
        }
        self.componentID.as_mut().unwrap()
    }

    // Take field
    pub fn take_componentID(&mut self) -> ::std::string::String {
        self.componentID.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string domain = 6;

    pub fn domain(&self) -> &str {
        match self.domain.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_domain(&mut self) {
        self.domain = ::std::option::Option::None;
    }

    pub fn has_domain(&self) -> bool {
        self.domain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: ::std::string::String) {
        self.domain = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domain(&mut self) -> &mut ::std::string::String {
        if self.domain.is_none() {
            self.domain = ::std::option::Option::Some(::std::string::String::new());
        }
        self.domain.as_mut().unwrap()
    }

    // Take field
    pub fn take_domain(&mut self) -> ::std::string::String {
        self.domain.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool future_response = 7;

    pub fn future_response(&self) -> bool {
        self.future_response.unwrap_or(false)
    }

    pub fn clear_future_response(&mut self) {
        self.future_response = ::std::option::Option::None;
    }

    pub fn has_future_response(&self) -> bool {
        self.future_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_future_response(&mut self, v: bool) {
        self.future_response = ::std::option::Option::Some(v);
    }

    // optional string future_socket_url = 8;

    pub fn future_socket_url(&self) -> &str {
        match self.future_socket_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_future_socket_url(&mut self) {
        self.future_socket_url = ::std::option::Option::None;
    }

    pub fn has_future_socket_url(&self) -> bool {
        self.future_socket_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_future_socket_url(&mut self, v: ::std::string::String) {
        self.future_socket_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_future_socket_url(&mut self) -> &mut ::std::string::String {
        if self.future_socket_url.is_none() {
            self.future_socket_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.future_socket_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_future_socket_url(&mut self) -> ::std::string::String {
        self.future_socket_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 received_timestamp = 9;

    pub fn received_timestamp(&self) -> u64 {
        self.received_timestamp.unwrap_or(0)
    }

    pub fn clear_received_timestamp(&mut self) {
        self.received_timestamp = ::std::option::Option::None;
    }

    pub fn has_received_timestamp(&self) -> bool {
        self.received_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_received_timestamp(&mut self, v: u64) {
        self.received_timestamp = ::std::option::Option::Some(v);
    }

    // optional bool is_cached_dataproduct = 10;

    pub fn is_cached_dataproduct(&self) -> bool {
        self.is_cached_dataproduct.unwrap_or(false)
    }

    pub fn clear_is_cached_dataproduct(&mut self) {
        self.is_cached_dataproduct = ::std::option::Option::None;
    }

    pub fn has_is_cached_dataproduct(&self) -> bool {
        self.is_cached_dataproduct.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_cached_dataproduct(&mut self, v: bool) {
        self.is_cached_dataproduct = ::std::option::Option::Some(v);
    }

    // optional bool is_relayed_dataproduct = 11;

    pub fn is_relayed_dataproduct(&self) -> bool {
        self.is_relayed_dataproduct.unwrap_or(false)
    }

    pub fn clear_is_relayed_dataproduct(&mut self) {
        self.is_relayed_dataproduct = ::std::option::Option::None;
    }

    pub fn has_is_relayed_dataproduct(&self) -> bool {
        self.is_relayed_dataproduct.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_relayed_dataproduct(&mut self, v: bool) {
        self.is_relayed_dataproduct = ::std::option::Option::Some(v);
    }

    // optional string protocol = 12;

    pub fn protocol(&self) -> &str {
        match self.protocol.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_protocol(&mut self) {
        self.protocol = ::std::option::Option::None;
    }

    pub fn has_protocol(&self) -> bool {
        self.protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        if self.protocol.is_none() {
            self.protocol = ::std::option::Option::Some(::std::string::String::new());
        }
        self.protocol.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        self.protocol.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string type_name = 13;

    pub fn type_name(&self) -> &str {
        match self.type_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_name(&mut self) {
        self.type_name = ::std::option::Option::None;
    }

    pub fn has_type_name(&self) -> bool {
        self.type_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type_name(&mut self, v: ::std::string::String) {
        self.type_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_name(&mut self) -> &mut ::std::string::String {
        if self.type_name.is_none() {
            self.type_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_name(&mut self) -> ::std::string::String {
        self.type_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 registration_time = 14;

    pub fn registration_time(&self) -> u32 {
        self.registration_time.unwrap_or(0)
    }

    pub fn clear_registration_time(&mut self) {
        self.registration_time = ::std::option::Option::None;
    }

    pub fn has_registration_time(&self) -> bool {
        self.registration_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_registration_time(&mut self, v: u32) {
        self.registration_time = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &GravityDataProductPB| { &m.timestamp },
            |m: &mut GravityDataProductPB| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dataProductID",
            |m: &GravityDataProductPB| { &m.dataProductID },
            |m: &mut GravityDataProductPB| { &mut m.dataProductID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "softwareVersion",
            |m: &GravityDataProductPB| { &m.softwareVersion },
            |m: &mut GravityDataProductPB| { &mut m.softwareVersion },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &GravityDataProductPB| { &m.data },
            |m: &mut GravityDataProductPB| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "componentID",
            |m: &GravityDataProductPB| { &m.componentID },
            |m: &mut GravityDataProductPB| { &mut m.componentID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "domain",
            |m: &GravityDataProductPB| { &m.domain },
            |m: &mut GravityDataProductPB| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "future_response",
            |m: &GravityDataProductPB| { &m.future_response },
            |m: &mut GravityDataProductPB| { &mut m.future_response },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "future_socket_url",
            |m: &GravityDataProductPB| { &m.future_socket_url },
            |m: &mut GravityDataProductPB| { &mut m.future_socket_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "received_timestamp",
            |m: &GravityDataProductPB| { &m.received_timestamp },
            |m: &mut GravityDataProductPB| { &mut m.received_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_cached_dataproduct",
            |m: &GravityDataProductPB| { &m.is_cached_dataproduct },
            |m: &mut GravityDataProductPB| { &mut m.is_cached_dataproduct },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_relayed_dataproduct",
            |m: &GravityDataProductPB| { &m.is_relayed_dataproduct },
            |m: &mut GravityDataProductPB| { &mut m.is_relayed_dataproduct },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "protocol",
            |m: &GravityDataProductPB| { &m.protocol },
            |m: &mut GravityDataProductPB| { &mut m.protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type_name",
            |m: &GravityDataProductPB| { &m.type_name },
            |m: &mut GravityDataProductPB| { &mut m.type_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "registration_time",
            |m: &GravityDataProductPB| { &m.registration_time },
            |m: &mut GravityDataProductPB| { &mut m.registration_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GravityDataProductPB>(
            "GravityDataProductPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GravityDataProductPB {
    const NAME: &'static str = "GravityDataProductPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.dataProductID = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.softwareVersion = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.data = ::std::option::Option::Some(is.read_bytes()?);
                },
                42 => {
                    self.componentID = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.domain = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.future_response = ::std::option::Option::Some(is.read_bool()?);
                },
                66 => {
                    self.future_socket_url = ::std::option::Option::Some(is.read_string()?);
                },
                72 => {
                    self.received_timestamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                80 => {
                    self.is_cached_dataproduct = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.is_relayed_dataproduct = ::std::option::Option::Some(is.read_bool()?);
                },
                98 => {
                    self.protocol = ::std::option::Option::Some(is.read_string()?);
                },
                106 => {
                    self.type_name = ::std::option::Option::Some(is.read_string()?);
                },
                112 => {
                    self.registration_time = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.dataProductID.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.softwareVersion.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.componentID.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.domain.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.future_response {
            my_size += 1 + 1;
        }
        if let Some(v) = self.future_socket_url.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.received_timestamp {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.is_cached_dataproduct {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_relayed_dataproduct {
            my_size += 1 + 1;
        }
        if let Some(v) = self.protocol.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.type_name.as_ref() {
            my_size += ::protobuf::rt::string_size(13, &v);
        }
        if let Some(v) = self.registration_time {
            my_size += ::protobuf::rt::uint32_size(14, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.dataProductID.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.softwareVersion.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.componentID.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.domain.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.future_response {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.future_socket_url.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.received_timestamp {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.is_cached_dataproduct {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.is_relayed_dataproduct {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.protocol.as_ref() {
            os.write_string(12, v)?;
        }
        if let Some(v) = self.type_name.as_ref() {
            os.write_string(13, v)?;
        }
        if let Some(v) = self.registration_time {
            os.write_uint32(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GravityDataProductPB {
        GravityDataProductPB::new()
    }

    fn clear(&mut self) {
        self.timestamp = ::std::option::Option::None;
        self.dataProductID = ::std::option::Option::None;
        self.softwareVersion = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.componentID = ::std::option::Option::None;
        self.domain = ::std::option::Option::None;
        self.future_response = ::std::option::Option::None;
        self.future_socket_url = ::std::option::Option::None;
        self.received_timestamp = ::std::option::Option::None;
        self.is_cached_dataproduct = ::std::option::Option::None;
        self.is_relayed_dataproduct = ::std::option::Option::None;
        self.protocol = ::std::option::Option::None;
        self.type_name = ::std::option::Option::None;
        self.registration_time = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GravityDataProductPB {
        static instance: GravityDataProductPB = GravityDataProductPB {
            timestamp: ::std::option::Option::None,
            dataProductID: ::std::option::Option::None,
            softwareVersion: ::std::option::Option::None,
            data: ::std::option::Option::None,
            componentID: ::std::option::Option::None,
            domain: ::std::option::Option::None,
            future_response: ::std::option::Option::None,
            future_socket_url: ::std::option::Option::None,
            received_timestamp: ::std::option::Option::None,
            is_cached_dataproduct: ::std::option::Option::None,
            is_relayed_dataproduct: ::std::option::Option::None,
            protocol: ::std::option::Option::None,
            type_name: ::std::option::Option::None,
            registration_time: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GravityDataProductPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GravityDataProductPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GravityDataProductPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GravityDataProductPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aGravityDataProductPB.proto\x12\x07gravity\"\xb1\x04\n\x14GravityDa\
    taProductPB\x12\x1c\n\ttimestamp\x18\x01\x20\x01(\x04R\ttimestamp\x12$\n\
    \rdataProductID\x18\x02\x20\x01(\tR\rdataProductID\x12(\n\x0fsoftwareVer\
    sion\x18\x03\x20\x01(\tR\x0fsoftwareVersion\x12\x12\n\x04data\x18\x04\
    \x20\x01(\x0cR\x04data\x12\x20\n\x0bcomponentID\x18\x05\x20\x01(\tR\x0bc\
    omponentID\x12\x16\n\x06domain\x18\x06\x20\x01(\tR\x06domain\x12'\n\x0ff\
    uture_response\x18\x07\x20\x01(\x08R\x0efutureResponse\x12*\n\x11future_\
    socket_url\x18\x08\x20\x01(\tR\x0ffutureSocketUrl\x12-\n\x12received_tim\
    estamp\x18\t\x20\x01(\x04R\x11receivedTimestamp\x122\n\x15is_cached_data\
    product\x18\n\x20\x01(\x08R\x13isCachedDataproduct\x12;\n\x16is_relayed_\
    dataproduct\x18\x0b\x20\x01(\x08:\x05falseR\x14isRelayedDataproduct\x12\
    \x1c\n\x08protocol\x18\x0c\x20\x01(\t:\0R\x08protocol\x12\x1d\n\ttype_na\
    me\x18\r\x20\x01(\t:\0R\x08typeName\x12+\n\x11registration_time\x18\x0e\
    \x20\x01(\rR\x10registrationTimeB=\n\x1ccom.aphysci.gravity.protobufB\
    \x1bGravityDataProductContainerH\x01J\xf7\x0f\n\x06\x12\x04\x12\0)\x01\n\
    \xec\x05\n\x01\x0c\x12\x03\x12\0\x122\xe1\x05*\x20(C)\x20Copyright\x2020\
    13,\x20Applied\x20Physical\x20Sciences\x20Corp.,\x20A\x20General\x20Dyna\
    mics\x20Company\n*\n*\x20Gravity\x20is\x20free\x20software;\x20you\x20ca\
    n\x20redistribute\x20it\x20and/or\x20modify\n*\x20it\x20under\x20the\x20\
    terms\x20of\x20the\x20GNU\x20Lesser\x20General\x20Public\x20License\x20a\
    s\x20published\x20by\n*\x20the\x20Free\x20Software\x20Foundation;\x20eit\
    her\x20version\x203\x20of\x20the\x20License,\x20or\n*\x20(at\x20your\x20\
    option)\x20any\x20later\x20version.\n*\n*\x20This\x20program\x20is\x20di\
    stributed\x20in\x20the\x20hope\x20that\x20it\x20will\x20be\x20useful,\n*\
    \x20but\x20WITHOUT\x20ANY\x20WARRANTY;\x20without\x20even\x20the\x20impl\
    ied\x20warranty\x20of\n*\x20MERCHANTABILITY\x20or\x20FITNESS\x20FOR\x20A\
    \x20PARTICULAR\x20PURPOSE.\x20\x20See\x20the\n*\x20GNU\x20Lesser\x20Gene\
    ral\x20Public\x20License\x20for\x20more\x20details.\n*\n*\x20You\x20shou\
    ld\x20have\x20received\x20a\x20copy\x20of\x20the\x20GNU\x20Lesser\x20Gen\
    eral\x20Public\n*\x20License\x20along\x20with\x20this\x20program;\n*\x20\
    If\x20not,\x20see\x20<http://www.gnu.org/licenses/>.\n*\n\n\x08\n\x01\
    \x08\x12\x03\x13\0\x1c\n\t\n\x02\x08\t\x12\x03\x13\0\x1c\n\x08\n\x01\x08\
    \x12\x03\x14\0<\n\t\n\x02\x08\x08\x12\x03\x14\0<\n\x08\n\x01\x08\x12\x03\
    \x15\05\n\t\n\x02\x08\x01\x12\x03\x15\05\n\x08\n\x01\x02\x12\x03\x17\0\
    \x10\n\n\n\x02\x04\0\x12\x04\x19\0)\x01\n\n\n\x03\x04\0\x01\x12\x03\x19\
    \x08\x1c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x1b\x08&\n\x0c\n\x05\x04\0\x02\
    \0\x04\x12\x03\x1b\x08\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1b\x11\
    \x17\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1b\x18!\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x1b$%\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x1c\x08*\n\x0c\n\
    \x05\x04\0\x02\x01\x04\x12\x03\x1c\x08\x10\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x1c\x11\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1c\x18%\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1c()\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x1d\x08,\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x1d\x08\x10\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\x1d\x11\x17\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x1d\x18'\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1d*+\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03\x1e\x08\x20\n\x0c\n\x05\x04\0\x02\x03\x04\x12\
    \x03\x1e\x08\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x1e\x11\x16\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03\x1e\x17\x1b\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\x1e\x1e\x1f\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x1f\x08(\n\
    \x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x1f\x08\x10\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03\x1f\x11\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x1f\
    \x18#\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x1f&'\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03\x20\x08#\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x20\x08\x10\
    \n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x20\x11\x17\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x20\x18\x1e\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x20!\
    \"\n\x0b\n\x04\x04\0\x02\x06\x12\x03!\x08*\n\x0c\n\x05\x04\0\x02\x06\x04\
    \x12\x03!\x08\x10\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03!\x11\x15\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03!\x16%\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03!()\n\x0b\n\x04\x04\0\x02\x07\x12\x03\"\x08.\n\x0c\n\x05\x04\0\x02\
    \x07\x04\x12\x03\"\x08\x10\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\"\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\"\x18)\n\x0c\n\x05\x04\0\x02\
    \x07\x03\x12\x03\",-\n\x0b\n\x04\x04\0\x02\x08\x12\x03#\x08/\n\x0c\n\x05\
    \x04\0\x02\x08\x04\x12\x03#\x08\x10\n\x0c\n\x05\x04\0\x02\x08\x05\x12\
    \x03#\x11\x17\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03#\x18*\n\x0c\n\x05\
    \x04\0\x02\x08\x03\x12\x03#-.\n\x0b\n\x04\x04\0\x02\t\x12\x03$\x081\n\
    \x0c\n\x05\x04\0\x02\t\x04\x12\x03$\x08\x10\n\x0c\n\x05\x04\0\x02\t\x05\
    \x12\x03$\x11\x15\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03$\x16+\n\x0c\n\x05\
    \x04\0\x02\t\x03\x12\x03$.0\n\x0b\n\x04\x04\0\x02\n\x12\x03%\x08D\n\x0c\
    \n\x05\x04\0\x02\n\x04\x12\x03%\x08\x10\n\x0c\n\x05\x04\0\x02\n\x05\x12\
    \x03%\x11\x15\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03%\x16,\n\x0c\n\x05\x04\
    \0\x02\n\x03\x12\x03%/1\n\x0c\n\x05\x04\0\x02\n\x08\x12\x03%2C\n\x0c\n\
    \x05\x04\0\x02\n\x07\x12\x03%=B\n4\n\x04\x04\0\x02\x0b\x12\x03&\x083\"'\
    \x20typically\x20'protobuf2',\x20all\x20lowercase.\n\n\x0c\n\x05\x04\0\
    \x02\x0b\x04\x12\x03&\x08\x10\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03&\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03&\x18\x20\n\x0c\n\x05\x04\0\
    \x02\x0b\x03\x12\x03&#%\n\x0c\n\x05\x04\0\x02\x0b\x08\x12\x03&&2\n\x0c\n\
    \x05\x04\0\x02\x0b\x07\x12\x03&/1\n1\n\x04\x04\0\x02\x0c\x12\x03'\x084\"\
    $\x20e.g.:\x20gravity.GravityDataProductPB\n\n\x0c\n\x05\x04\0\x02\x0c\
    \x04\x12\x03'\x08\x10\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03'\x11\x17\n\
    \x0c\n\x05\x04\0\x02\x0c\x01\x12\x03'\x18!\n\x0c\n\x05\x04\0\x02\x0c\x03\
    \x12\x03'$&\n\x0c\n\x05\x04\0\x02\x0c\x08\x12\x03''3\n\x0c\n\x05\x04\0\
    \x02\x0c\x07\x12\x03'02\nA\n\x04\x04\0\x02\r\x12\x03(\x08/\"4\x20Time\
    \x20(seconds)\x20of\x20publication/service\x20registration\n\n\x0c\n\x05\
    \x04\0\x02\r\x04\x12\x03(\x08\x10\n\x0c\n\x05\x04\0\x02\r\x05\x12\x03(\
    \x11\x17\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03(\x18)\n\x0c\n\x05\x04\0\x02\
    \r\x03\x12\x03(,.\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(GravityDataProductPB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
