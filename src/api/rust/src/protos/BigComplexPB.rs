// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BigComplexPB.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:SmallGuyPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SmallGuyPB {
    // message fields
    // @@protoc_insertion_point(field:SmallGuyPB.number)
    pub number: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:SmallGuyPB.proverb)
    pub proverb: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SmallGuyPB.values)
    pub values: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:SmallGuyPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SmallGuyPB {
    fn default() -> &'a SmallGuyPB {
        <SmallGuyPB as ::protobuf::Message>::default_instance()
    }
}

impl SmallGuyPB {
    pub fn new() -> SmallGuyPB {
        ::std::default::Default::default()
    }

    // optional int32 number = 1;

    pub fn number(&self) -> i32 {
        self.number.unwrap_or(0)
    }

    pub fn clear_number(&mut self) {
        self.number = ::std::option::Option::None;
    }

    pub fn has_number(&self) -> bool {
        self.number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: i32) {
        self.number = ::std::option::Option::Some(v);
    }

    // optional string proverb = 2;

    pub fn proverb(&self) -> &str {
        match self.proverb.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_proverb(&mut self) {
        self.proverb = ::std::option::Option::None;
    }

    pub fn has_proverb(&self) -> bool {
        self.proverb.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proverb(&mut self, v: ::std::string::String) {
        self.proverb = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proverb(&mut self) -> &mut ::std::string::String {
        if self.proverb.is_none() {
            self.proverb = ::std::option::Option::Some(::std::string::String::new());
        }
        self.proverb.as_mut().unwrap()
    }

    // Take field
    pub fn take_proverb(&mut self) -> ::std::string::String {
        self.proverb.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "number",
            |m: &SmallGuyPB| { &m.number },
            |m: &mut SmallGuyPB| { &mut m.number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "proverb",
            |m: &SmallGuyPB| { &m.proverb },
            |m: &mut SmallGuyPB| { &mut m.proverb },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &SmallGuyPB| { &m.values },
            |m: &mut SmallGuyPB| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SmallGuyPB>(
            "SmallGuyPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SmallGuyPB {
    const NAME: &'static str = "SmallGuyPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.number = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.proverb = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    is.read_repeated_packed_int32_into(&mut self.values)?;
                },
                24 => {
                    self.values.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.number {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.proverb.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.values {
            my_size += ::protobuf::rt::int32_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.number {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.proverb.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.values {
            os.write_int32(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SmallGuyPB {
        SmallGuyPB::new()
    }

    fn clear(&mut self) {
        self.number = ::std::option::Option::None;
        self.proverb = ::std::option::Option::None;
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SmallGuyPB {
        static instance: SmallGuyPB = SmallGuyPB {
            number: ::std::option::Option::None,
            proverb: ::std::option::Option::None,
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SmallGuyPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SmallGuyPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SmallGuyPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SmallGuyPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:BigGuyPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BigGuyPB {
    // message fields
    // @@protoc_insertion_point(field:BigGuyPB.littles)
    pub littles: ::std::vec::Vec<SmallGuyPB>,
    // @@protoc_insertion_point(field:BigGuyPB.bigNumber)
    pub bigNumber: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:BigGuyPB.helloworld)
    pub helloworld: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:BigGuyPB.shouldI)
    pub shouldI: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:BigGuyPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BigGuyPB {
    fn default() -> &'a BigGuyPB {
        <BigGuyPB as ::protobuf::Message>::default_instance()
    }
}

impl BigGuyPB {
    pub fn new() -> BigGuyPB {
        ::std::default::Default::default()
    }

    // optional int32 bigNumber = 2;

    pub fn bigNumber(&self) -> i32 {
        self.bigNumber.unwrap_or(0)
    }

    pub fn clear_bigNumber(&mut self) {
        self.bigNumber = ::std::option::Option::None;
    }

    pub fn has_bigNumber(&self) -> bool {
        self.bigNumber.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bigNumber(&mut self, v: i32) {
        self.bigNumber = ::std::option::Option::Some(v);
    }

    // optional string helloworld = 3;

    pub fn helloworld(&self) -> &str {
        match self.helloworld.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_helloworld(&mut self) {
        self.helloworld = ::std::option::Option::None;
    }

    pub fn has_helloworld(&self) -> bool {
        self.helloworld.is_some()
    }

    // Param is passed by value, moved
    pub fn set_helloworld(&mut self, v: ::std::string::String) {
        self.helloworld = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_helloworld(&mut self) -> &mut ::std::string::String {
        if self.helloworld.is_none() {
            self.helloworld = ::std::option::Option::Some(::std::string::String::new());
        }
        self.helloworld.as_mut().unwrap()
    }

    // Take field
    pub fn take_helloworld(&mut self) -> ::std::string::String {
        self.helloworld.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool shouldI = 4;

    pub fn shouldI(&self) -> bool {
        self.shouldI.unwrap_or(false)
    }

    pub fn clear_shouldI(&mut self) {
        self.shouldI = ::std::option::Option::None;
    }

    pub fn has_shouldI(&self) -> bool {
        self.shouldI.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shouldI(&mut self, v: bool) {
        self.shouldI = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "littles",
            |m: &BigGuyPB| { &m.littles },
            |m: &mut BigGuyPB| { &mut m.littles },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bigNumber",
            |m: &BigGuyPB| { &m.bigNumber },
            |m: &mut BigGuyPB| { &mut m.bigNumber },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "helloworld",
            |m: &BigGuyPB| { &m.helloworld },
            |m: &mut BigGuyPB| { &mut m.helloworld },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "shouldI",
            |m: &BigGuyPB| { &m.shouldI },
            |m: &mut BigGuyPB| { &mut m.shouldI },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BigGuyPB>(
            "BigGuyPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BigGuyPB {
    const NAME: &'static str = "BigGuyPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.littles.push(is.read_message()?);
                },
                16 => {
                    self.bigNumber = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    self.helloworld = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.shouldI = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.littles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.bigNumber {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.helloworld.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.shouldI {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.littles {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.bigNumber {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.helloworld.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.shouldI {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BigGuyPB {
        BigGuyPB::new()
    }

    fn clear(&mut self) {
        self.littles.clear();
        self.bigNumber = ::std::option::Option::None;
        self.helloworld = ::std::option::Option::None;
        self.shouldI = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BigGuyPB {
        static instance: BigGuyPB = BigGuyPB {
            littles: ::std::vec::Vec::new(),
            bigNumber: ::std::option::Option::None,
            helloworld: ::std::option::Option::None,
            shouldI: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BigGuyPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BigGuyPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BigGuyPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BigGuyPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:BigResultPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BigResultPB {
    // message fields
    // @@protoc_insertion_point(field:BigResultPB.didIt)
    pub didIt: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:BigResultPB.length)
    pub length: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:BigResultPB.littleNums)
    pub littleNums: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:BigResultPB.proverbs)
    pub proverbs: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:BigResultPB.values)
    pub values: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:BigResultPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BigResultPB {
    fn default() -> &'a BigResultPB {
        <BigResultPB as ::protobuf::Message>::default_instance()
    }
}

impl BigResultPB {
    pub fn new() -> BigResultPB {
        ::std::default::Default::default()
    }

    // optional bool didIt = 1;

    pub fn didIt(&self) -> bool {
        self.didIt.unwrap_or(false)
    }

    pub fn clear_didIt(&mut self) {
        self.didIt = ::std::option::Option::None;
    }

    pub fn has_didIt(&self) -> bool {
        self.didIt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_didIt(&mut self, v: bool) {
        self.didIt = ::std::option::Option::Some(v);
    }

    // optional int32 length = 2;

    pub fn length(&self) -> i32 {
        self.length.unwrap_or(0)
    }

    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: i32) {
        self.length = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "didIt",
            |m: &BigResultPB| { &m.didIt },
            |m: &mut BigResultPB| { &mut m.didIt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "length",
            |m: &BigResultPB| { &m.length },
            |m: &mut BigResultPB| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "littleNums",
            |m: &BigResultPB| { &m.littleNums },
            |m: &mut BigResultPB| { &mut m.littleNums },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "proverbs",
            |m: &BigResultPB| { &m.proverbs },
            |m: &mut BigResultPB| { &mut m.proverbs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &BigResultPB| { &m.values },
            |m: &mut BigResultPB| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BigResultPB>(
            "BigResultPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BigResultPB {
    const NAME: &'static str = "BigResultPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.didIt = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.length = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    is.read_repeated_packed_int32_into(&mut self.littleNums)?;
                },
                24 => {
                    self.littleNums.push(is.read_int32()?);
                },
                34 => {
                    self.proverbs.push(is.read_string()?);
                },
                42 => {
                    is.read_repeated_packed_int32_into(&mut self.values)?;
                },
                40 => {
                    self.values.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.didIt {
            my_size += 1 + 1;
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        for value in &self.littleNums {
            my_size += ::protobuf::rt::int32_size(3, *value);
        };
        for value in &self.proverbs {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.values {
            my_size += ::protobuf::rt::int32_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.didIt {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.length {
            os.write_int32(2, v)?;
        }
        for v in &self.littleNums {
            os.write_int32(3, *v)?;
        };
        for v in &self.proverbs {
            os.write_string(4, &v)?;
        };
        for v in &self.values {
            os.write_int32(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BigResultPB {
        BigResultPB::new()
    }

    fn clear(&mut self) {
        self.didIt = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.littleNums.clear();
        self.proverbs.clear();
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BigResultPB {
        static instance: BigResultPB = BigResultPB {
            didIt: ::std::option::Option::None,
            length: ::std::option::Option::None,
            littleNums: ::std::vec::Vec::new(),
            proverbs: ::std::vec::Vec::new(),
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BigResultPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BigResultPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BigResultPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BigResultPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12BigComplexPB.proto\"V\n\nSmallGuyPB\x12\x16\n\x06number\x18\x01\
    \x20\x01(\x05R\x06number\x12\x18\n\x07proverb\x18\x02\x20\x01(\tR\x07pro\
    verb\x12\x16\n\x06values\x18\x03\x20\x03(\x05R\x06values\"\x89\x01\n\x08\
    BigGuyPB\x12%\n\x07littles\x18\x01\x20\x03(\x0b2\x0b.SmallGuyPBR\x07litt\
    les\x12\x1c\n\tbigNumber\x18\x02\x20\x01(\x05R\tbigNumber\x12\x1e\n\nhel\
    loworld\x18\x03\x20\x01(\tR\nhelloworld\x12\x18\n\x07shouldI\x18\x04\x20\
    \x01(\x08R\x07shouldI\"\x8f\x01\n\x0bBigResultPB\x12\x14\n\x05didIt\x18\
    \x01\x20\x01(\x08R\x05didIt\x12\x16\n\x06length\x18\x02\x20\x01(\x05R\
    \x06length\x12\x1e\n\nlittleNums\x18\x03\x20\x03(\x05R\nlittleNums\x12\
    \x1a\n\x08proverbs\x18\x04\x20\x03(\tR\x08proverbs\x12\x16\n\x06values\
    \x18\x05\x20\x03(\x05R\x06valuesJ\x96\x07\n\x06\x12\x04\x01\0\x17\x01\n\
    \x08\n\x01\x0c\x12\x03\x01\0\x12\n\n\n\x02\x04\0\x12\x04\x03\0\x07\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x03\x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x04\x04\x1e\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x04\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x04\r\x12\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x04\x13\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x04\x1c\x1d\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x05\x04\x20\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x05\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x05\r\x13\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x05\x14\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x05\x1e\x1f\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x04\x1e\n\x0c\n\
    \x05\x04\0\x02\x02\x04\x12\x03\x06\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03\x06\r\x12\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x06\x13\x19\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x1c\x1d\n\n\n\x02\x04\x01\x12\
    \x04\t\0\x0e\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x10\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\n\x04$\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\n\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\n\r\x17\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\n\x18\x1f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n\"#\
    \n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\x04!\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\x0b\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\
    \r\x12\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\x13\x1c\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x0b\x1f\x20\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x0c\x04#\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x0c\x04\x0c\n\x0c\
    \n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\r\x13\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03\x0c\x14\x1e\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0c!\"\
    \n\x0b\n\x04\x04\x01\x02\x03\x12\x03\r\x04\x1e\n\x0c\n\x05\x04\x01\x02\
    \x03\x04\x12\x03\r\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\r\r\
    \x11\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\r\x12\x19\n\x0c\n\x05\x04\
    \x01\x02\x03\x03\x12\x03\r\x1c\x1d\n\n\n\x02\x04\x02\x12\x04\x10\0\x17\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\x13\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x11\x04\x1c\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x11\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x11\r\x11\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03\x11\x12\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x11\x1a\
    \x1b\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x12\x04\x1e\n\x0c\n\x05\x04\x02\
    \x02\x01\x04\x12\x03\x12\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x12\r\x12\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x12\x13\x19\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x12\x1c\x1d\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03\x13\x04\"\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x13\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x13\r\x12\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x03\x13\x13\x1d\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x13\
    \x20!\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x14\x04!\n\x0c\n\x05\x04\x02\
    \x02\x03\x04\x12\x03\x14\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\
    \x14\r\x13\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x14\x14\x1c\n\x0c\n\
    \x05\x04\x02\x02\x03\x03\x12\x03\x14\x1f\x20\n\x0b\n\x04\x04\x02\x02\x04\
    \x12\x03\x15\x04\x1e\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03\x15\x04\x0c\
    \n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x15\r\x12\n\x0c\n\x05\x04\x02\
    \x02\x04\x01\x12\x03\x15\x13\x19\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\
    \x15\x1c\x1d\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(SmallGuyPB::generated_message_descriptor_data());
            messages.push(BigGuyPB::generated_message_descriptor_data());
            messages.push(BigResultPB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
