// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BasicCounterDataProduct.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:BasicCounterDataProductPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BasicCounterDataProductPB {
    // message fields
    // @@protoc_insertion_point(field:BasicCounterDataProductPB.count)
    pub count: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:BasicCounterDataProductPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BasicCounterDataProductPB {
    fn default() -> &'a BasicCounterDataProductPB {
        <BasicCounterDataProductPB as ::protobuf::Message>::default_instance()
    }
}

impl BasicCounterDataProductPB {
    pub fn new() -> BasicCounterDataProductPB {
        ::std::default::Default::default()
    }

    // required int32 count = 1;

    pub fn count(&self) -> i32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &BasicCounterDataProductPB| { &m.count },
            |m: &mut BasicCounterDataProductPB| { &mut m.count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BasicCounterDataProductPB>(
            "BasicCounterDataProductPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BasicCounterDataProductPB {
    const NAME: &'static str = "BasicCounterDataProductPB";

    fn is_initialized(&self) -> bool {
        if self.count.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.count {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BasicCounterDataProductPB {
        BasicCounterDataProductPB::new()
    }

    fn clear(&mut self) {
        self.count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BasicCounterDataProductPB {
        static instance: BasicCounterDataProductPB = BasicCounterDataProductPB {
            count: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BasicCounterDataProductPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BasicCounterDataProductPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BasicCounterDataProductPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BasicCounterDataProductPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dBasicCounterDataProduct.proto\"1\n\x19BasicCounterDataProductPB\
    \x12\x14\n\x05count\x18\x01\x20\x02(\x05R\x05countB\x02H\x01J\xe9\x06\n\
    \x06\x12\x04\x12\0\x18\x01\n\xec\x05\n\x01\x0c\x12\x03\x12\0\x122\xe1\
    \x05*\x20(C)\x20Copyright\x202013,\x20Applied\x20Physical\x20Sciences\
    \x20Corp.,\x20A\x20General\x20Dynamics\x20Company\n*\n*\x20Gravity\x20is\
    \x20free\x20software;\x20you\x20can\x20redistribute\x20it\x20and/or\x20m\
    odify\n*\x20it\x20under\x20the\x20terms\x20of\x20the\x20GNU\x20Lesser\
    \x20General\x20Public\x20License\x20as\x20published\x20by\n*\x20the\x20F\
    ree\x20Software\x20Foundation;\x20either\x20version\x203\x20of\x20the\
    \x20License,\x20or\n*\x20(at\x20your\x20option)\x20any\x20later\x20versi\
    on.\n*\n*\x20This\x20program\x20is\x20distributed\x20in\x20the\x20hope\
    \x20that\x20it\x20will\x20be\x20useful,\n*\x20but\x20WITHOUT\x20ANY\x20W\
    ARRANTY;\x20without\x20even\x20the\x20implied\x20warranty\x20of\n*\x20ME\
    RCHANTABILITY\x20or\x20FITNESS\x20FOR\x20A\x20PARTICULAR\x20PURPOSE.\x20\
    \x20See\x20the\n*\x20GNU\x20Lesser\x20General\x20Public\x20License\x20fo\
    r\x20more\x20details.\n*\n*\x20You\x20should\x20have\x20received\x20a\
    \x20copy\x20of\x20the\x20GNU\x20Lesser\x20General\x20Public\n*\x20Licens\
    e\x20along\x20with\x20this\x20program;\n*\x20If\x20not,\x20see\x20<http:\
    //www.gnu.org/licenses/>.\n*\n\n\x08\n\x01\x08\x12\x03\x13\0\x1c\n\t\n\
    \x02\x08\t\x12\x03\x13\0\x1c\n\n\n\x02\x04\0\x12\x04\x15\0\x18\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x15\x08!\n\x0b\n\x04\x04\0\x02\0\x12\x03\x17\x08!\
    \n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x17\x08\x10\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x17\x11\x16\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x17\x17\x1c\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17\x1f\x20\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(BasicCounterDataProductPB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
