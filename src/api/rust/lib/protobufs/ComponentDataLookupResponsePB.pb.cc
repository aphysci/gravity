// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComponentDataLookupResponsePB.proto

#include "ComponentDataLookupResponsePB.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gravity {
PROTOBUF_CONSTEXPR PublisherInfoPB::PublisherInfoPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.componentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isrelay_)*/false
  , /*decltype(_impl_.registration_time_)*/0u} {}
struct PublisherInfoPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublisherInfoPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublisherInfoPBDefaultTypeInternal() {}
  union {
    PublisherInfoPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublisherInfoPBDefaultTypeInternal _PublisherInfoPB_default_instance_;
PROTOBUF_CONSTEXPR ComponentDataLookupResponsePB::ComponentDataLookupResponsePB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publishers_)*/{}
  , /*decltype(_impl_.lookupid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ComponentDataLookupResponsePBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentDataLookupResponsePBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentDataLookupResponsePBDefaultTypeInternal() {}
  union {
    ComponentDataLookupResponsePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentDataLookupResponsePBDefaultTypeInternal _ComponentDataLookupResponsePB_default_instance_;
}  // namespace gravity
static ::_pb::Metadata file_level_metadata_ComponentDataLookupResponsePB_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ComponentDataLookupResponsePB_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ComponentDataLookupResponsePB_2eproto = nullptr;

const uint32_t TableStruct_ComponentDataLookupResponsePB_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gravity::PublisherInfoPB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gravity::PublisherInfoPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gravity::PublisherInfoPB, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::gravity::PublisherInfoPB, _impl_.isrelay_),
  PROTOBUF_FIELD_OFFSET(::gravity::PublisherInfoPB, _impl_.componentid_),
  PROTOBUF_FIELD_OFFSET(::gravity::PublisherInfoPB, _impl_.ipaddress_),
  PROTOBUF_FIELD_OFFSET(::gravity::PublisherInfoPB, _impl_.registration_time_),
  0,
  3,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::gravity::ComponentDataLookupResponsePB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gravity::ComponentDataLookupResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gravity::ComponentDataLookupResponsePB, _impl_.lookupid_),
  PROTOBUF_FIELD_OFFSET(::gravity::ComponentDataLookupResponsePB, _impl_.publishers_),
  PROTOBUF_FIELD_OFFSET(::gravity::ComponentDataLookupResponsePB, _impl_.domain_id_),
  0,
  ~0u,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::gravity::PublisherInfoPB)},
  { 16, 25, -1, sizeof(::gravity::ComponentDataLookupResponsePB)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gravity::_PublisherInfoPB_default_instance_._instance,
  &::gravity::_ComponentDataLookupResponsePB_default_instance_._instance,
};

const char descriptor_table_protodef_ComponentDataLookupResponsePB_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#ComponentDataLookupResponsePB.proto\022\007g"
  "ravity\"r\n\017PublisherInfoPB\022\013\n\003url\030\001 \001(\t\022\017"
  "\n\007isRelay\030\002 \001(\010\022\023\n\013componentID\030\003 \001(\t\022\021\n\t"
  "ipAddress\030\004 \001(\t\022\031\n\021registration_time\030\005 \001"
  "(\r\"t\n\035ComponentDataLookupResponsePB\022\020\n\010l"
  "ookupID\030\001 \001(\t\022,\n\npublishers\030\002 \003(\0132\030.grav"
  "ity.PublisherInfoPB\022\023\n\tdomain_id\030\003 \001(\t:\000"
  "BF\n\034com.aphysci.gravity.protobufB$Compon"
  "entDataLookupResponseContainerH\001"
  ;
static ::_pbi::once_flag descriptor_table_ComponentDataLookupResponsePB_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ComponentDataLookupResponsePB_2eproto = {
    false, false, 352, descriptor_table_protodef_ComponentDataLookupResponsePB_2eproto,
    "ComponentDataLookupResponsePB.proto",
    &descriptor_table_ComponentDataLookupResponsePB_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_ComponentDataLookupResponsePB_2eproto::offsets,
    file_level_metadata_ComponentDataLookupResponsePB_2eproto, file_level_enum_descriptors_ComponentDataLookupResponsePB_2eproto,
    file_level_service_descriptors_ComponentDataLookupResponsePB_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ComponentDataLookupResponsePB_2eproto_getter() {
  return &descriptor_table_ComponentDataLookupResponsePB_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ComponentDataLookupResponsePB_2eproto(&descriptor_table_ComponentDataLookupResponsePB_2eproto);
namespace gravity {

// ===================================================================

class PublisherInfoPB::_Internal {
 public:
  using HasBits = decltype(std::declval<PublisherInfoPB>()._impl_._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isrelay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_componentid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_registration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PublisherInfoPB::PublisherInfoPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gravity.PublisherInfoPB)
}
PublisherInfoPB::PublisherInfoPB(const PublisherInfoPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublisherInfoPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.componentid_){}
    , decltype(_impl_.ipaddress_){}
    , decltype(_impl_.isrelay_){}
    , decltype(_impl_.registration_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.componentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.componentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_componentid()) {
    _this->_impl_.componentid_.Set(from._internal_componentid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ipaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ipaddress()) {
    _this->_impl_.ipaddress_.Set(from._internal_ipaddress(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isrelay_, &from._impl_.isrelay_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.registration_time_) -
    reinterpret_cast<char*>(&_impl_.isrelay_)) + sizeof(_impl_.registration_time_));
  // @@protoc_insertion_point(copy_constructor:gravity.PublisherInfoPB)
}

inline void PublisherInfoPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.componentid_){}
    , decltype(_impl_.ipaddress_){}
    , decltype(_impl_.isrelay_){false}
    , decltype(_impl_.registration_time_){0u}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.componentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.componentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublisherInfoPB::~PublisherInfoPB() {
  // @@protoc_insertion_point(destructor:gravity.PublisherInfoPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublisherInfoPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.componentid_.Destroy();
  _impl_.ipaddress_.Destroy();
}

void PublisherInfoPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublisherInfoPB::Clear() {
// @@protoc_insertion_point(message_clear_start:gravity.PublisherInfoPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.componentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ipaddress_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.isrelay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.registration_time_) -
        reinterpret_cast<char*>(&_impl_.isrelay_)) + sizeof(_impl_.registration_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublisherInfoPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.PublisherInfoPB.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool isRelay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_isrelay(&has_bits);
          _impl_.isrelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string componentID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_componentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.PublisherInfoPB.componentID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ipAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.PublisherInfoPB.ipAddress");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 registration_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_registration_time(&has_bits);
          _impl_.registration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublisherInfoPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gravity.PublisherInfoPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.PublisherInfoPB.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional bool isRelay = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isrelay(), target);
  }

  // optional string componentID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_componentid().data(), static_cast<int>(this->_internal_componentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.PublisherInfoPB.componentID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_componentid(), target);
  }

  // optional string ipAddress = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipaddress().data(), static_cast<int>(this->_internal_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.PublisherInfoPB.ipAddress");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ipaddress(), target);
  }

  // optional uint32 registration_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_registration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gravity.PublisherInfoPB)
  return target;
}

size_t PublisherInfoPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gravity.PublisherInfoPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string componentID = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_componentid());
    }

    // optional string ipAddress = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipaddress());
    }

    // optional bool isRelay = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 registration_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_registration_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublisherInfoPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublisherInfoPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublisherInfoPB::GetClassData() const { return &_class_data_; }


void PublisherInfoPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublisherInfoPB*>(&to_msg);
  auto& from = static_cast<const PublisherInfoPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gravity.PublisherInfoPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_componentid(from._internal_componentid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ipaddress(from._internal_ipaddress());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.isrelay_ = from._impl_.isrelay_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.registration_time_ = from._impl_.registration_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublisherInfoPB::CopyFrom(const PublisherInfoPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gravity.PublisherInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublisherInfoPB::IsInitialized() const {
  return true;
}

void PublisherInfoPB::InternalSwap(PublisherInfoPB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.componentid_, lhs_arena,
      &other->_impl_.componentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipaddress_, lhs_arena,
      &other->_impl_.ipaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublisherInfoPB, _impl_.registration_time_)
      + sizeof(PublisherInfoPB::_impl_.registration_time_)
      - PROTOBUF_FIELD_OFFSET(PublisherInfoPB, _impl_.isrelay_)>(
          reinterpret_cast<char*>(&_impl_.isrelay_),
          reinterpret_cast<char*>(&other->_impl_.isrelay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublisherInfoPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComponentDataLookupResponsePB_2eproto_getter, &descriptor_table_ComponentDataLookupResponsePB_2eproto_once,
      file_level_metadata_ComponentDataLookupResponsePB_2eproto[0]);
}

// ===================================================================

class ComponentDataLookupResponsePB::_Internal {
 public:
  using HasBits = decltype(std::declval<ComponentDataLookupResponsePB>()._impl_._has_bits_);
  static void set_has_lookupid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_domain_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ComponentDataLookupResponsePB::ComponentDataLookupResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gravity.ComponentDataLookupResponsePB)
}
ComponentDataLookupResponsePB::ComponentDataLookupResponsePB(const ComponentDataLookupResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentDataLookupResponsePB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publishers_){from._impl_.publishers_}
    , decltype(_impl_.lookupid_){}
    , decltype(_impl_.domain_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lookupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lookupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lookupid()) {
    _this->_impl_.lookupid_.Set(from._internal_lookupid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain_id()) {
    _this->_impl_.domain_id_.Set(from._internal_domain_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gravity.ComponentDataLookupResponsePB)
}

inline void ComponentDataLookupResponsePB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publishers_){arena}
    , decltype(_impl_.lookupid_){}
    , decltype(_impl_.domain_id_){}
  };
  _impl_.lookupid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lookupid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentDataLookupResponsePB::~ComponentDataLookupResponsePB() {
  // @@protoc_insertion_point(destructor:gravity.ComponentDataLookupResponsePB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentDataLookupResponsePB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publishers_.~RepeatedPtrField();
  _impl_.lookupid_.Destroy();
  _impl_.domain_id_.Destroy();
}

void ComponentDataLookupResponsePB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentDataLookupResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:gravity.ComponentDataLookupResponsePB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publishers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lookupid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.domain_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentDataLookupResponsePB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string lookupID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lookupid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ComponentDataLookupResponsePB.lookupID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .gravity.PublisherInfoPB publishers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publishers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string domain_id = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_domain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ComponentDataLookupResponsePB.domain_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentDataLookupResponsePB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gravity.ComponentDataLookupResponsePB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string lookupID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lookupid().data(), static_cast<int>(this->_internal_lookupid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ComponentDataLookupResponsePB.lookupID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lookupid(), target);
  }

  // repeated .gravity.PublisherInfoPB publishers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publishers_size()); i < n; i++) {
    const auto& repfield = this->_internal_publishers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string domain_id = 3 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain_id().data(), static_cast<int>(this->_internal_domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ComponentDataLookupResponsePB.domain_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_domain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gravity.ComponentDataLookupResponsePB)
  return target;
}

size_t ComponentDataLookupResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gravity.ComponentDataLookupResponsePB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gravity.PublisherInfoPB publishers = 2;
  total_size += 1UL * this->_internal_publishers_size();
  for (const auto& msg : this->_impl_.publishers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string lookupID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lookupid());
    }

    // optional string domain_id = 3 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentDataLookupResponsePB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentDataLookupResponsePB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentDataLookupResponsePB::GetClassData() const { return &_class_data_; }


void ComponentDataLookupResponsePB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentDataLookupResponsePB*>(&to_msg);
  auto& from = static_cast<const ComponentDataLookupResponsePB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gravity.ComponentDataLookupResponsePB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.publishers_.MergeFrom(from._impl_.publishers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_lookupid(from._internal_lookupid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_domain_id(from._internal_domain_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentDataLookupResponsePB::CopyFrom(const ComponentDataLookupResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gravity.ComponentDataLookupResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDataLookupResponsePB::IsInitialized() const {
  return true;
}

void ComponentDataLookupResponsePB::InternalSwap(ComponentDataLookupResponsePB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.publishers_.InternalSwap(&other->_impl_.publishers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lookupid_, lhs_arena,
      &other->_impl_.lookupid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_id_, lhs_arena,
      &other->_impl_.domain_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentDataLookupResponsePB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ComponentDataLookupResponsePB_2eproto_getter, &descriptor_table_ComponentDataLookupResponsePB_2eproto_once,
      file_level_metadata_ComponentDataLookupResponsePB_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gravity::PublisherInfoPB*
Arena::CreateMaybeMessage< ::gravity::PublisherInfoPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gravity::PublisherInfoPB >(arena);
}
template<> PROTOBUF_NOINLINE ::gravity::ComponentDataLookupResponsePB*
Arena::CreateMaybeMessage< ::gravity::ComponentDataLookupResponsePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gravity::ComponentDataLookupResponsePB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
