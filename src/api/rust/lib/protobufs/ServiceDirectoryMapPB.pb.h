// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDirectoryMapPB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryMapPB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryMapPB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceDirectoryMapPB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceDirectoryMapPB_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDirectoryMapPB_2eproto;
namespace gravity {
class ProductChange;
struct ProductChangeDefaultTypeInternal;
extern ProductChangeDefaultTypeInternal _ProductChange_default_instance_;
class ProductLocations;
struct ProductLocationsDefaultTypeInternal;
extern ProductLocationsDefaultTypeInternal _ProductLocations_default_instance_;
class ServiceDirectoryMapPB;
struct ServiceDirectoryMapPBDefaultTypeInternal;
extern ServiceDirectoryMapPBDefaultTypeInternal _ServiceDirectoryMapPB_default_instance_;
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> ::gravity::ProductChange* Arena::CreateMaybeMessage<::gravity::ProductChange>(Arena*);
template<> ::gravity::ProductLocations* Arena::CreateMaybeMessage<::gravity::ProductLocations>(Arena*);
template<> ::gravity::ServiceDirectoryMapPB* Arena::CreateMaybeMessage<::gravity::ServiceDirectoryMapPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gravity {

enum ProductChange_RegistrationType : int {
  ProductChange_RegistrationType_DATA = 0,
  ProductChange_RegistrationType_SERVICE = 1
};
bool ProductChange_RegistrationType_IsValid(int value);
constexpr ProductChange_RegistrationType ProductChange_RegistrationType_RegistrationType_MIN = ProductChange_RegistrationType_DATA;
constexpr ProductChange_RegistrationType ProductChange_RegistrationType_RegistrationType_MAX = ProductChange_RegistrationType_SERVICE;
constexpr int ProductChange_RegistrationType_RegistrationType_ARRAYSIZE = ProductChange_RegistrationType_RegistrationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductChange_RegistrationType_descriptor();
template<typename T>
inline const std::string& ProductChange_RegistrationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProductChange_RegistrationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProductChange_RegistrationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProductChange_RegistrationType_descriptor(), enum_t_value);
}
inline bool ProductChange_RegistrationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProductChange_RegistrationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProductChange_RegistrationType>(
    ProductChange_RegistrationType_descriptor(), name, value);
}
enum ProductChange_ChangeType : int {
  ProductChange_ChangeType_REMOVE = 0,
  ProductChange_ChangeType_ADD = 1
};
bool ProductChange_ChangeType_IsValid(int value);
constexpr ProductChange_ChangeType ProductChange_ChangeType_ChangeType_MIN = ProductChange_ChangeType_REMOVE;
constexpr ProductChange_ChangeType ProductChange_ChangeType_ChangeType_MAX = ProductChange_ChangeType_ADD;
constexpr int ProductChange_ChangeType_ChangeType_ARRAYSIZE = ProductChange_ChangeType_ChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductChange_ChangeType_descriptor();
template<typename T>
inline const std::string& ProductChange_ChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProductChange_ChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProductChange_ChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProductChange_ChangeType_descriptor(), enum_t_value);
}
inline bool ProductChange_ChangeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProductChange_ChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProductChange_ChangeType>(
    ProductChange_ChangeType_descriptor(), name, value);
}
// ===================================================================

class ProductLocations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ProductLocations) */ {
 public:
  inline ProductLocations() : ProductLocations(nullptr) {}
  ~ProductLocations() override;
  explicit PROTOBUF_CONSTEXPR ProductLocations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductLocations(const ProductLocations& from);
  ProductLocations(ProductLocations&& from) noexcept
    : ProductLocations() {
    *this = ::std::move(from);
  }

  inline ProductLocations& operator=(const ProductLocations& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductLocations& operator=(ProductLocations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductLocations& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductLocations* internal_default_instance() {
    return reinterpret_cast<const ProductLocations*>(
               &_ProductLocations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProductLocations& a, ProductLocations& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductLocations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductLocations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductLocations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductLocations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductLocations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProductLocations& from) {
    ProductLocations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductLocations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ProductLocations";
  }
  protected:
  explicit ProductLocations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kComponentIdFieldNumber = 3,
    kDomainIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kProductIdFieldNumber = 1,
  };
  // repeated string url = 2;
  int url_size() const;
  private:
  int _internal_url_size() const;
  public:
  void clear_url();
  const std::string& url(int index) const;
  std::string* mutable_url(int index);
  void set_url(int index, const std::string& value);
  void set_url(int index, std::string&& value);
  void set_url(int index, const char* value);
  void set_url(int index, const char* value, size_t size);
  std::string* add_url();
  void add_url(const std::string& value);
  void add_url(std::string&& value);
  void add_url(const char* value);
  void add_url(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& url() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_url();
  private:
  const std::string& _internal_url(int index) const;
  std::string* _internal_add_url();
  public:

  // repeated string component_id = 3;
  int component_id_size() const;
  private:
  int _internal_component_id_size() const;
  public:
  void clear_component_id();
  const std::string& component_id(int index) const;
  std::string* mutable_component_id(int index);
  void set_component_id(int index, const std::string& value);
  void set_component_id(int index, std::string&& value);
  void set_component_id(int index, const char* value);
  void set_component_id(int index, const char* value, size_t size);
  std::string* add_component_id();
  void add_component_id(const std::string& value);
  void add_component_id(std::string&& value);
  void add_component_id(const char* value);
  void add_component_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& component_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_component_id();
  private:
  const std::string& _internal_component_id(int index) const;
  std::string* _internal_add_component_id();
  public:

  // repeated string domain_id = 4;
  int domain_id_size() const;
  private:
  int _internal_domain_id_size() const;
  public:
  void clear_domain_id();
  const std::string& domain_id(int index) const;
  std::string* mutable_domain_id(int index);
  void set_domain_id(int index, const std::string& value);
  void set_domain_id(int index, std::string&& value);
  void set_domain_id(int index, const char* value);
  void set_domain_id(int index, const char* value, size_t size);
  std::string* add_domain_id();
  void add_domain_id(const std::string& value);
  void add_domain_id(std::string&& value);
  void add_domain_id(const char* value);
  void add_domain_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& domain_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_domain_id();
  private:
  const std::string& _internal_domain_id(int index) const;
  std::string* _internal_add_domain_id();
  public:

  // repeated uint64 timestamp = 5;
  int timestamp_size() const;
  private:
  int _internal_timestamp_size() const;
  public:
  void clear_timestamp();
  private:
  uint64_t _internal_timestamp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_timestamp() const;
  void _internal_add_timestamp(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_timestamp();
  public:
  uint64_t timestamp(int index) const;
  void set_timestamp(int index, uint64_t value);
  void add_timestamp(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_timestamp();

  // optional string product_id = 1;
  bool has_product_id() const;
  private:
  bool _internal_has_product_id() const;
  public:
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_NODISCARD std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // @@protoc_insertion_point(class_scope:gravity.ProductLocations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> url_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> component_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> domain_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > timestamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceDirectoryMapPB_2eproto;
};
// -------------------------------------------------------------------

class ProductChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ProductChange) */ {
 public:
  inline ProductChange() : ProductChange(nullptr) {}
  ~ProductChange() override;
  explicit PROTOBUF_CONSTEXPR ProductChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductChange(const ProductChange& from);
  ProductChange(ProductChange&& from) noexcept
    : ProductChange() {
    *this = ::std::move(from);
  }

  inline ProductChange& operator=(const ProductChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductChange& operator=(ProductChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductChange* internal_default_instance() {
    return reinterpret_cast<const ProductChange*>(
               &_ProductChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProductChange& a, ProductChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProductChange& from) {
    ProductChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ProductChange";
  }
  protected:
  explicit ProductChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProductChange_RegistrationType RegistrationType;
  static constexpr RegistrationType DATA =
    ProductChange_RegistrationType_DATA;
  static constexpr RegistrationType SERVICE =
    ProductChange_RegistrationType_SERVICE;
  static inline bool RegistrationType_IsValid(int value) {
    return ProductChange_RegistrationType_IsValid(value);
  }
  static constexpr RegistrationType RegistrationType_MIN =
    ProductChange_RegistrationType_RegistrationType_MIN;
  static constexpr RegistrationType RegistrationType_MAX =
    ProductChange_RegistrationType_RegistrationType_MAX;
  static constexpr int RegistrationType_ARRAYSIZE =
    ProductChange_RegistrationType_RegistrationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RegistrationType_descriptor() {
    return ProductChange_RegistrationType_descriptor();
  }
  template<typename T>
  static inline const std::string& RegistrationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RegistrationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RegistrationType_Name.");
    return ProductChange_RegistrationType_Name(enum_t_value);
  }
  static inline bool RegistrationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RegistrationType* value) {
    return ProductChange_RegistrationType_Parse(name, value);
  }

  typedef ProductChange_ChangeType ChangeType;
  static constexpr ChangeType REMOVE =
    ProductChange_ChangeType_REMOVE;
  static constexpr ChangeType ADD =
    ProductChange_ChangeType_ADD;
  static inline bool ChangeType_IsValid(int value) {
    return ProductChange_ChangeType_IsValid(value);
  }
  static constexpr ChangeType ChangeType_MIN =
    ProductChange_ChangeType_ChangeType_MIN;
  static constexpr ChangeType ChangeType_MAX =
    ProductChange_ChangeType_ChangeType_MAX;
  static constexpr int ChangeType_ARRAYSIZE =
    ProductChange_ChangeType_ChangeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChangeType_descriptor() {
    return ProductChange_ChangeType_descriptor();
  }
  template<typename T>
  static inline const std::string& ChangeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChangeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChangeType_Name.");
    return ProductChange_ChangeType_Name(enum_t_value);
  }
  static inline bool ChangeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChangeType* value) {
    return ProductChange_ChangeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kUrlFieldNumber = 2,
    kComponentIdFieldNumber = 5,
    kRegistrationTypeFieldNumber = 3,
    kChangeTypeFieldNumber = 4,
    kTimestampFieldNumber = 6,
  };
  // optional string product_id = 1;
  bool has_product_id() const;
  private:
  bool _internal_has_product_id() const;
  public:
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_NODISCARD std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string component_id = 5;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  const std::string& component_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_id();
  PROTOBUF_NODISCARD std::string* release_component_id();
  void set_allocated_component_id(std::string* component_id);
  private:
  const std::string& _internal_component_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_id(const std::string& value);
  std::string* _internal_mutable_component_id();
  public:

  // optional .gravity.ProductChange.RegistrationType registration_type = 3;
  bool has_registration_type() const;
  private:
  bool _internal_has_registration_type() const;
  public:
  void clear_registration_type();
  ::gravity::ProductChange_RegistrationType registration_type() const;
  void set_registration_type(::gravity::ProductChange_RegistrationType value);
  private:
  ::gravity::ProductChange_RegistrationType _internal_registration_type() const;
  void _internal_set_registration_type(::gravity::ProductChange_RegistrationType value);
  public:

  // optional .gravity.ProductChange.ChangeType change_type = 4;
  bool has_change_type() const;
  private:
  bool _internal_has_change_type() const;
  public:
  void clear_change_type();
  ::gravity::ProductChange_ChangeType change_type() const;
  void set_change_type(::gravity::ProductChange_ChangeType value);
  private:
  ::gravity::ProductChange_ChangeType _internal_change_type() const;
  void _internal_set_change_type(::gravity::ProductChange_ChangeType value);
  public:

  // optional uint64 timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gravity.ProductChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_id_;
    int registration_type_;
    int change_type_;
    uint64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceDirectoryMapPB_2eproto;
};
// -------------------------------------------------------------------

class ServiceDirectoryMapPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ServiceDirectoryMapPB) */ {
 public:
  inline ServiceDirectoryMapPB() : ServiceDirectoryMapPB(nullptr) {}
  ~ServiceDirectoryMapPB() override;
  explicit PROTOBUF_CONSTEXPR ServiceDirectoryMapPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceDirectoryMapPB(const ServiceDirectoryMapPB& from);
  ServiceDirectoryMapPB(ServiceDirectoryMapPB&& from) noexcept
    : ServiceDirectoryMapPB() {
    *this = ::std::move(from);
  }

  inline ServiceDirectoryMapPB& operator=(const ServiceDirectoryMapPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDirectoryMapPB& operator=(ServiceDirectoryMapPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceDirectoryMapPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceDirectoryMapPB* internal_default_instance() {
    return reinterpret_cast<const ServiceDirectoryMapPB*>(
               &_ServiceDirectoryMapPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceDirectoryMapPB& a, ServiceDirectoryMapPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceDirectoryMapPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceDirectoryMapPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceDirectoryMapPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceDirectoryMapPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceDirectoryMapPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceDirectoryMapPB& from) {
    ServiceDirectoryMapPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDirectoryMapPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ServiceDirectoryMapPB";
  }
  protected:
  explicit ServiceDirectoryMapPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceProviderFieldNumber = 1,
    kDataProviderFieldNumber = 2,
    kDomainFieldNumber = 4,
    kChangeFieldNumber = 3,
  };
  // repeated .gravity.ProductLocations service_provider = 1;
  int service_provider_size() const;
  private:
  int _internal_service_provider_size() const;
  public:
  void clear_service_provider();
  ::gravity::ProductLocations* mutable_service_provider(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations >*
      mutable_service_provider();
  private:
  const ::gravity::ProductLocations& _internal_service_provider(int index) const;
  ::gravity::ProductLocations* _internal_add_service_provider();
  public:
  const ::gravity::ProductLocations& service_provider(int index) const;
  ::gravity::ProductLocations* add_service_provider();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations >&
      service_provider() const;

  // repeated .gravity.ProductLocations data_provider = 2;
  int data_provider_size() const;
  private:
  int _internal_data_provider_size() const;
  public:
  void clear_data_provider();
  ::gravity::ProductLocations* mutable_data_provider(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations >*
      mutable_data_provider();
  private:
  const ::gravity::ProductLocations& _internal_data_provider(int index) const;
  ::gravity::ProductLocations* _internal_add_data_provider();
  public:
  const ::gravity::ProductLocations& data_provider(int index) const;
  ::gravity::ProductLocations* add_data_provider();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations >&
      data_provider() const;

  // optional string domain = 4;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional .gravity.ProductChange change = 3;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::gravity::ProductChange& change() const;
  PROTOBUF_NODISCARD ::gravity::ProductChange* release_change();
  ::gravity::ProductChange* mutable_change();
  void set_allocated_change(::gravity::ProductChange* change);
  private:
  const ::gravity::ProductChange& _internal_change() const;
  ::gravity::ProductChange* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::gravity::ProductChange* change);
  ::gravity::ProductChange* unsafe_arena_release_change();

  // @@protoc_insertion_point(class_scope:gravity.ServiceDirectoryMapPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations > service_provider_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations > data_provider_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::gravity::ProductChange* change_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceDirectoryMapPB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProductLocations

// optional string product_id = 1;
inline bool ProductLocations::_internal_has_product_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProductLocations::has_product_id() const {
  return _internal_has_product_id();
}
inline void ProductLocations::clear_product_id() {
  _impl_.product_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProductLocations::product_id() const {
  // @@protoc_insertion_point(field_get:gravity.ProductLocations.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductLocations::set_product_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.product_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ProductLocations.product_id)
}
inline std::string* ProductLocations::mutable_product_id() {
  std::string* _s = _internal_mutable_product_id();
  // @@protoc_insertion_point(field_mutable:gravity.ProductLocations.product_id)
  return _s;
}
inline const std::string& ProductLocations::_internal_product_id() const {
  return _impl_.product_id_.Get();
}
inline void ProductLocations::_internal_set_product_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.product_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductLocations::_internal_mutable_product_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.product_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductLocations::release_product_id() {
  // @@protoc_insertion_point(field_release:gravity.ProductLocations.product_id)
  if (!_internal_has_product_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.product_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_id_.IsDefault()) {
    _impl_.product_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProductLocations::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.product_id_.SetAllocated(product_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_id_.IsDefault()) {
    _impl_.product_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ProductLocations.product_id)
}

// repeated string url = 2;
inline int ProductLocations::_internal_url_size() const {
  return _impl_.url_.size();
}
inline int ProductLocations::url_size() const {
  return _internal_url_size();
}
inline void ProductLocations::clear_url() {
  _impl_.url_.Clear();
}
inline std::string* ProductLocations::add_url() {
  std::string* _s = _internal_add_url();
  // @@protoc_insertion_point(field_add_mutable:gravity.ProductLocations.url)
  return _s;
}
inline const std::string& ProductLocations::_internal_url(int index) const {
  return _impl_.url_.Get(index);
}
inline const std::string& ProductLocations::url(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ProductLocations.url)
  return _internal_url(index);
}
inline std::string* ProductLocations::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ProductLocations.url)
  return _impl_.url_.Mutable(index);
}
inline void ProductLocations::set_url(int index, const std::string& value) {
  _impl_.url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gravity.ProductLocations.url)
}
inline void ProductLocations::set_url(int index, std::string&& value) {
  _impl_.url_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gravity.ProductLocations.url)
}
inline void ProductLocations::set_url(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gravity.ProductLocations.url)
}
inline void ProductLocations::set_url(int index, const char* value, size_t size) {
  _impl_.url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gravity.ProductLocations.url)
}
inline std::string* ProductLocations::_internal_add_url() {
  return _impl_.url_.Add();
}
inline void ProductLocations::add_url(const std::string& value) {
  _impl_.url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gravity.ProductLocations.url)
}
inline void ProductLocations::add_url(std::string&& value) {
  _impl_.url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gravity.ProductLocations.url)
}
inline void ProductLocations::add_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gravity.ProductLocations.url)
}
inline void ProductLocations::add_url(const char* value, size_t size) {
  _impl_.url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gravity.ProductLocations.url)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProductLocations::url() const {
  // @@protoc_insertion_point(field_list:gravity.ProductLocations.url)
  return _impl_.url_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProductLocations::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ProductLocations.url)
  return &_impl_.url_;
}

// repeated string component_id = 3;
inline int ProductLocations::_internal_component_id_size() const {
  return _impl_.component_id_.size();
}
inline int ProductLocations::component_id_size() const {
  return _internal_component_id_size();
}
inline void ProductLocations::clear_component_id() {
  _impl_.component_id_.Clear();
}
inline std::string* ProductLocations::add_component_id() {
  std::string* _s = _internal_add_component_id();
  // @@protoc_insertion_point(field_add_mutable:gravity.ProductLocations.component_id)
  return _s;
}
inline const std::string& ProductLocations::_internal_component_id(int index) const {
  return _impl_.component_id_.Get(index);
}
inline const std::string& ProductLocations::component_id(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ProductLocations.component_id)
  return _internal_component_id(index);
}
inline std::string* ProductLocations::mutable_component_id(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ProductLocations.component_id)
  return _impl_.component_id_.Mutable(index);
}
inline void ProductLocations::set_component_id(int index, const std::string& value) {
  _impl_.component_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gravity.ProductLocations.component_id)
}
inline void ProductLocations::set_component_id(int index, std::string&& value) {
  _impl_.component_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gravity.ProductLocations.component_id)
}
inline void ProductLocations::set_component_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.component_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gravity.ProductLocations.component_id)
}
inline void ProductLocations::set_component_id(int index, const char* value, size_t size) {
  _impl_.component_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gravity.ProductLocations.component_id)
}
inline std::string* ProductLocations::_internal_add_component_id() {
  return _impl_.component_id_.Add();
}
inline void ProductLocations::add_component_id(const std::string& value) {
  _impl_.component_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gravity.ProductLocations.component_id)
}
inline void ProductLocations::add_component_id(std::string&& value) {
  _impl_.component_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gravity.ProductLocations.component_id)
}
inline void ProductLocations::add_component_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.component_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gravity.ProductLocations.component_id)
}
inline void ProductLocations::add_component_id(const char* value, size_t size) {
  _impl_.component_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gravity.ProductLocations.component_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProductLocations::component_id() const {
  // @@protoc_insertion_point(field_list:gravity.ProductLocations.component_id)
  return _impl_.component_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProductLocations::mutable_component_id() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ProductLocations.component_id)
  return &_impl_.component_id_;
}

// repeated string domain_id = 4;
inline int ProductLocations::_internal_domain_id_size() const {
  return _impl_.domain_id_.size();
}
inline int ProductLocations::domain_id_size() const {
  return _internal_domain_id_size();
}
inline void ProductLocations::clear_domain_id() {
  _impl_.domain_id_.Clear();
}
inline std::string* ProductLocations::add_domain_id() {
  std::string* _s = _internal_add_domain_id();
  // @@protoc_insertion_point(field_add_mutable:gravity.ProductLocations.domain_id)
  return _s;
}
inline const std::string& ProductLocations::_internal_domain_id(int index) const {
  return _impl_.domain_id_.Get(index);
}
inline const std::string& ProductLocations::domain_id(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ProductLocations.domain_id)
  return _internal_domain_id(index);
}
inline std::string* ProductLocations::mutable_domain_id(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ProductLocations.domain_id)
  return _impl_.domain_id_.Mutable(index);
}
inline void ProductLocations::set_domain_id(int index, const std::string& value) {
  _impl_.domain_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gravity.ProductLocations.domain_id)
}
inline void ProductLocations::set_domain_id(int index, std::string&& value) {
  _impl_.domain_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gravity.ProductLocations.domain_id)
}
inline void ProductLocations::set_domain_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.domain_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gravity.ProductLocations.domain_id)
}
inline void ProductLocations::set_domain_id(int index, const char* value, size_t size) {
  _impl_.domain_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gravity.ProductLocations.domain_id)
}
inline std::string* ProductLocations::_internal_add_domain_id() {
  return _impl_.domain_id_.Add();
}
inline void ProductLocations::add_domain_id(const std::string& value) {
  _impl_.domain_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gravity.ProductLocations.domain_id)
}
inline void ProductLocations::add_domain_id(std::string&& value) {
  _impl_.domain_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gravity.ProductLocations.domain_id)
}
inline void ProductLocations::add_domain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.domain_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gravity.ProductLocations.domain_id)
}
inline void ProductLocations::add_domain_id(const char* value, size_t size) {
  _impl_.domain_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gravity.ProductLocations.domain_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProductLocations::domain_id() const {
  // @@protoc_insertion_point(field_list:gravity.ProductLocations.domain_id)
  return _impl_.domain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProductLocations::mutable_domain_id() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ProductLocations.domain_id)
  return &_impl_.domain_id_;
}

// repeated uint64 timestamp = 5;
inline int ProductLocations::_internal_timestamp_size() const {
  return _impl_.timestamp_.size();
}
inline int ProductLocations::timestamp_size() const {
  return _internal_timestamp_size();
}
inline void ProductLocations::clear_timestamp() {
  _impl_.timestamp_.Clear();
}
inline uint64_t ProductLocations::_internal_timestamp(int index) const {
  return _impl_.timestamp_.Get(index);
}
inline uint64_t ProductLocations::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ProductLocations.timestamp)
  return _internal_timestamp(index);
}
inline void ProductLocations::set_timestamp(int index, uint64_t value) {
  _impl_.timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:gravity.ProductLocations.timestamp)
}
inline void ProductLocations::_internal_add_timestamp(uint64_t value) {
  _impl_.timestamp_.Add(value);
}
inline void ProductLocations::add_timestamp(uint64_t value) {
  _internal_add_timestamp(value);
  // @@protoc_insertion_point(field_add:gravity.ProductLocations.timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ProductLocations::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ProductLocations::timestamp() const {
  // @@protoc_insertion_point(field_list:gravity.ProductLocations.timestamp)
  return _internal_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ProductLocations::_internal_mutable_timestamp() {
  return &_impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ProductLocations::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ProductLocations.timestamp)
  return _internal_mutable_timestamp();
}

// -------------------------------------------------------------------

// ProductChange

// optional string product_id = 1;
inline bool ProductChange::_internal_has_product_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProductChange::has_product_id() const {
  return _internal_has_product_id();
}
inline void ProductChange::clear_product_id() {
  _impl_.product_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProductChange::product_id() const {
  // @@protoc_insertion_point(field_get:gravity.ProductChange.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductChange::set_product_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.product_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ProductChange.product_id)
}
inline std::string* ProductChange::mutable_product_id() {
  std::string* _s = _internal_mutable_product_id();
  // @@protoc_insertion_point(field_mutable:gravity.ProductChange.product_id)
  return _s;
}
inline const std::string& ProductChange::_internal_product_id() const {
  return _impl_.product_id_.Get();
}
inline void ProductChange::_internal_set_product_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.product_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductChange::_internal_mutable_product_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.product_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductChange::release_product_id() {
  // @@protoc_insertion_point(field_release:gravity.ProductChange.product_id)
  if (!_internal_has_product_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.product_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_id_.IsDefault()) {
    _impl_.product_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProductChange::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.product_id_.SetAllocated(product_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_id_.IsDefault()) {
    _impl_.product_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ProductChange.product_id)
}

// optional string url = 2;
inline bool ProductChange::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProductChange::has_url() const {
  return _internal_has_url();
}
inline void ProductChange::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProductChange::url() const {
  // @@protoc_insertion_point(field_get:gravity.ProductChange.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductChange::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ProductChange.url)
}
inline std::string* ProductChange::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:gravity.ProductChange.url)
  return _s;
}
inline const std::string& ProductChange::_internal_url() const {
  return _impl_.url_.Get();
}
inline void ProductChange::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductChange::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductChange::release_url() {
  // @@protoc_insertion_point(field_release:gravity.ProductChange.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProductChange::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ProductChange.url)
}

// optional .gravity.ProductChange.RegistrationType registration_type = 3;
inline bool ProductChange::_internal_has_registration_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProductChange::has_registration_type() const {
  return _internal_has_registration_type();
}
inline void ProductChange::clear_registration_type() {
  _impl_.registration_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::gravity::ProductChange_RegistrationType ProductChange::_internal_registration_type() const {
  return static_cast< ::gravity::ProductChange_RegistrationType >(_impl_.registration_type_);
}
inline ::gravity::ProductChange_RegistrationType ProductChange::registration_type() const {
  // @@protoc_insertion_point(field_get:gravity.ProductChange.registration_type)
  return _internal_registration_type();
}
inline void ProductChange::_internal_set_registration_type(::gravity::ProductChange_RegistrationType value) {
  assert(::gravity::ProductChange_RegistrationType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.registration_type_ = value;
}
inline void ProductChange::set_registration_type(::gravity::ProductChange_RegistrationType value) {
  _internal_set_registration_type(value);
  // @@protoc_insertion_point(field_set:gravity.ProductChange.registration_type)
}

// optional .gravity.ProductChange.ChangeType change_type = 4;
inline bool ProductChange::_internal_has_change_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProductChange::has_change_type() const {
  return _internal_has_change_type();
}
inline void ProductChange::clear_change_type() {
  _impl_.change_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::gravity::ProductChange_ChangeType ProductChange::_internal_change_type() const {
  return static_cast< ::gravity::ProductChange_ChangeType >(_impl_.change_type_);
}
inline ::gravity::ProductChange_ChangeType ProductChange::change_type() const {
  // @@protoc_insertion_point(field_get:gravity.ProductChange.change_type)
  return _internal_change_type();
}
inline void ProductChange::_internal_set_change_type(::gravity::ProductChange_ChangeType value) {
  assert(::gravity::ProductChange_ChangeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.change_type_ = value;
}
inline void ProductChange::set_change_type(::gravity::ProductChange_ChangeType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:gravity.ProductChange.change_type)
}

// optional string component_id = 5;
inline bool ProductChange::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProductChange::has_component_id() const {
  return _internal_has_component_id();
}
inline void ProductChange::clear_component_id() {
  _impl_.component_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProductChange::component_id() const {
  // @@protoc_insertion_point(field_get:gravity.ProductChange.component_id)
  return _internal_component_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductChange::set_component_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.component_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ProductChange.component_id)
}
inline std::string* ProductChange::mutable_component_id() {
  std::string* _s = _internal_mutable_component_id();
  // @@protoc_insertion_point(field_mutable:gravity.ProductChange.component_id)
  return _s;
}
inline const std::string& ProductChange::_internal_component_id() const {
  return _impl_.component_id_.Get();
}
inline void ProductChange::_internal_set_component_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.component_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProductChange::_internal_mutable_component_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.component_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProductChange::release_component_id() {
  // @@protoc_insertion_point(field_release:gravity.ProductChange.component_id)
  if (!_internal_has_component_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.component_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_id_.IsDefault()) {
    _impl_.component_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProductChange::set_allocated_component_id(std::string* component_id) {
  if (component_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.component_id_.SetAllocated(component_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_id_.IsDefault()) {
    _impl_.component_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ProductChange.component_id)
}

// optional uint64 timestamp = 6;
inline bool ProductChange::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProductChange::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ProductChange::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t ProductChange::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t ProductChange::timestamp() const {
  // @@protoc_insertion_point(field_get:gravity.ProductChange.timestamp)
  return _internal_timestamp();
}
inline void ProductChange::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.timestamp_ = value;
}
inline void ProductChange::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gravity.ProductChange.timestamp)
}

// -------------------------------------------------------------------

// ServiceDirectoryMapPB

// repeated .gravity.ProductLocations service_provider = 1;
inline int ServiceDirectoryMapPB::_internal_service_provider_size() const {
  return _impl_.service_provider_.size();
}
inline int ServiceDirectoryMapPB::service_provider_size() const {
  return _internal_service_provider_size();
}
inline void ServiceDirectoryMapPB::clear_service_provider() {
  _impl_.service_provider_.Clear();
}
inline ::gravity::ProductLocations* ServiceDirectoryMapPB::mutable_service_provider(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryMapPB.service_provider)
  return _impl_.service_provider_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations >*
ServiceDirectoryMapPB::mutable_service_provider() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ServiceDirectoryMapPB.service_provider)
  return &_impl_.service_provider_;
}
inline const ::gravity::ProductLocations& ServiceDirectoryMapPB::_internal_service_provider(int index) const {
  return _impl_.service_provider_.Get(index);
}
inline const ::gravity::ProductLocations& ServiceDirectoryMapPB::service_provider(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryMapPB.service_provider)
  return _internal_service_provider(index);
}
inline ::gravity::ProductLocations* ServiceDirectoryMapPB::_internal_add_service_provider() {
  return _impl_.service_provider_.Add();
}
inline ::gravity::ProductLocations* ServiceDirectoryMapPB::add_service_provider() {
  ::gravity::ProductLocations* _add = _internal_add_service_provider();
  // @@protoc_insertion_point(field_add:gravity.ServiceDirectoryMapPB.service_provider)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations >&
ServiceDirectoryMapPB::service_provider() const {
  // @@protoc_insertion_point(field_list:gravity.ServiceDirectoryMapPB.service_provider)
  return _impl_.service_provider_;
}

// repeated .gravity.ProductLocations data_provider = 2;
inline int ServiceDirectoryMapPB::_internal_data_provider_size() const {
  return _impl_.data_provider_.size();
}
inline int ServiceDirectoryMapPB::data_provider_size() const {
  return _internal_data_provider_size();
}
inline void ServiceDirectoryMapPB::clear_data_provider() {
  _impl_.data_provider_.Clear();
}
inline ::gravity::ProductLocations* ServiceDirectoryMapPB::mutable_data_provider(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryMapPB.data_provider)
  return _impl_.data_provider_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations >*
ServiceDirectoryMapPB::mutable_data_provider() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ServiceDirectoryMapPB.data_provider)
  return &_impl_.data_provider_;
}
inline const ::gravity::ProductLocations& ServiceDirectoryMapPB::_internal_data_provider(int index) const {
  return _impl_.data_provider_.Get(index);
}
inline const ::gravity::ProductLocations& ServiceDirectoryMapPB::data_provider(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryMapPB.data_provider)
  return _internal_data_provider(index);
}
inline ::gravity::ProductLocations* ServiceDirectoryMapPB::_internal_add_data_provider() {
  return _impl_.data_provider_.Add();
}
inline ::gravity::ProductLocations* ServiceDirectoryMapPB::add_data_provider() {
  ::gravity::ProductLocations* _add = _internal_add_data_provider();
  // @@protoc_insertion_point(field_add:gravity.ServiceDirectoryMapPB.data_provider)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::ProductLocations >&
ServiceDirectoryMapPB::data_provider() const {
  // @@protoc_insertion_point(field_list:gravity.ServiceDirectoryMapPB.data_provider)
  return _impl_.data_provider_;
}

// optional .gravity.ProductChange change = 3;
inline bool ServiceDirectoryMapPB::_internal_has_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.change_ != nullptr);
  return value;
}
inline bool ServiceDirectoryMapPB::has_change() const {
  return _internal_has_change();
}
inline void ServiceDirectoryMapPB::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::gravity::ProductChange& ServiceDirectoryMapPB::_internal_change() const {
  const ::gravity::ProductChange* p = _impl_.change_;
  return p != nullptr ? *p : reinterpret_cast<const ::gravity::ProductChange&>(
      ::gravity::_ProductChange_default_instance_);
}
inline const ::gravity::ProductChange& ServiceDirectoryMapPB::change() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryMapPB.change)
  return _internal_change();
}
inline void ServiceDirectoryMapPB::unsafe_arena_set_allocated_change(
    ::gravity::ProductChange* change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.change_);
  }
  _impl_.change_ = change;
  if (change) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gravity.ServiceDirectoryMapPB.change)
}
inline ::gravity::ProductChange* ServiceDirectoryMapPB::release_change() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gravity::ProductChange* temp = _impl_.change_;
  _impl_.change_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gravity::ProductChange* ServiceDirectoryMapPB::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryMapPB.change)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gravity::ProductChange* temp = _impl_.change_;
  _impl_.change_ = nullptr;
  return temp;
}
inline ::gravity::ProductChange* ServiceDirectoryMapPB::_internal_mutable_change() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.change_ == nullptr) {
    auto* p = CreateMaybeMessage<::gravity::ProductChange>(GetArenaForAllocation());
    _impl_.change_ = p;
  }
  return _impl_.change_;
}
inline ::gravity::ProductChange* ServiceDirectoryMapPB::mutable_change() {
  ::gravity::ProductChange* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryMapPB.change)
  return _msg;
}
inline void ServiceDirectoryMapPB::set_allocated_change(::gravity::ProductChange* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.change_;
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change);
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.change_ = change;
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryMapPB.change)
}

// optional string domain = 4;
inline bool ServiceDirectoryMapPB::_internal_has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceDirectoryMapPB::has_domain() const {
  return _internal_has_domain();
}
inline void ServiceDirectoryMapPB::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceDirectoryMapPB::domain() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryMapPB.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryMapPB::set_domain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryMapPB.domain)
}
inline std::string* ServiceDirectoryMapPB::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryMapPB.domain)
  return _s;
}
inline const std::string& ServiceDirectoryMapPB::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void ServiceDirectoryMapPB::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryMapPB::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryMapPB::release_domain() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryMapPB.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryMapPB::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryMapPB.domain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gravity

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gravity::ProductChange_RegistrationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gravity::ProductChange_RegistrationType>() {
  return ::gravity::ProductChange_RegistrationType_descriptor();
}
template <> struct is_proto_enum< ::gravity::ProductChange_ChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gravity::ProductChange_ChangeType>() {
  return ::gravity::ProductChange_ChangeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryMapPB_2eproto
