// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDirectoryDomainUpdatePB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryDomainUpdatePB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryDomainUpdatePB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceDirectoryDomainUpdatePB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceDirectoryDomainUpdatePB_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDirectoryDomainUpdatePB_2eproto;
namespace gravity {
class ServiceDirectoryDomainUpdatePB;
struct ServiceDirectoryDomainUpdatePBDefaultTypeInternal;
extern ServiceDirectoryDomainUpdatePBDefaultTypeInternal _ServiceDirectoryDomainUpdatePB_default_instance_;
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> ::gravity::ServiceDirectoryDomainUpdatePB* Arena::CreateMaybeMessage<::gravity::ServiceDirectoryDomainUpdatePB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gravity {

enum ServiceDirectoryDomainUpdatePB_UpdateType : int {
  ServiceDirectoryDomainUpdatePB_UpdateType_ADD = 1,
  ServiceDirectoryDomainUpdatePB_UpdateType_REMOVE = 2
};
bool ServiceDirectoryDomainUpdatePB_UpdateType_IsValid(int value);
constexpr ServiceDirectoryDomainUpdatePB_UpdateType ServiceDirectoryDomainUpdatePB_UpdateType_UpdateType_MIN = ServiceDirectoryDomainUpdatePB_UpdateType_ADD;
constexpr ServiceDirectoryDomainUpdatePB_UpdateType ServiceDirectoryDomainUpdatePB_UpdateType_UpdateType_MAX = ServiceDirectoryDomainUpdatePB_UpdateType_REMOVE;
constexpr int ServiceDirectoryDomainUpdatePB_UpdateType_UpdateType_ARRAYSIZE = ServiceDirectoryDomainUpdatePB_UpdateType_UpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceDirectoryDomainUpdatePB_UpdateType_descriptor();
template<typename T>
inline const std::string& ServiceDirectoryDomainUpdatePB_UpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceDirectoryDomainUpdatePB_UpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceDirectoryDomainUpdatePB_UpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceDirectoryDomainUpdatePB_UpdateType_descriptor(), enum_t_value);
}
inline bool ServiceDirectoryDomainUpdatePB_UpdateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceDirectoryDomainUpdatePB_UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceDirectoryDomainUpdatePB_UpdateType>(
    ServiceDirectoryDomainUpdatePB_UpdateType_descriptor(), name, value);
}
// ===================================================================

class ServiceDirectoryDomainUpdatePB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ServiceDirectoryDomainUpdatePB) */ {
 public:
  inline ServiceDirectoryDomainUpdatePB() : ServiceDirectoryDomainUpdatePB(nullptr) {}
  ~ServiceDirectoryDomainUpdatePB() override;
  explicit PROTOBUF_CONSTEXPR ServiceDirectoryDomainUpdatePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceDirectoryDomainUpdatePB(const ServiceDirectoryDomainUpdatePB& from);
  ServiceDirectoryDomainUpdatePB(ServiceDirectoryDomainUpdatePB&& from) noexcept
    : ServiceDirectoryDomainUpdatePB() {
    *this = ::std::move(from);
  }

  inline ServiceDirectoryDomainUpdatePB& operator=(const ServiceDirectoryDomainUpdatePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDirectoryDomainUpdatePB& operator=(ServiceDirectoryDomainUpdatePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceDirectoryDomainUpdatePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceDirectoryDomainUpdatePB* internal_default_instance() {
    return reinterpret_cast<const ServiceDirectoryDomainUpdatePB*>(
               &_ServiceDirectoryDomainUpdatePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceDirectoryDomainUpdatePB& a, ServiceDirectoryDomainUpdatePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceDirectoryDomainUpdatePB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceDirectoryDomainUpdatePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceDirectoryDomainUpdatePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceDirectoryDomainUpdatePB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceDirectoryDomainUpdatePB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceDirectoryDomainUpdatePB& from) {
    ServiceDirectoryDomainUpdatePB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDirectoryDomainUpdatePB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ServiceDirectoryDomainUpdatePB";
  }
  protected:
  explicit ServiceDirectoryDomainUpdatePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceDirectoryDomainUpdatePB_UpdateType UpdateType;
  static constexpr UpdateType ADD =
    ServiceDirectoryDomainUpdatePB_UpdateType_ADD;
  static constexpr UpdateType REMOVE =
    ServiceDirectoryDomainUpdatePB_UpdateType_REMOVE;
  static inline bool UpdateType_IsValid(int value) {
    return ServiceDirectoryDomainUpdatePB_UpdateType_IsValid(value);
  }
  static constexpr UpdateType UpdateType_MIN =
    ServiceDirectoryDomainUpdatePB_UpdateType_UpdateType_MIN;
  static constexpr UpdateType UpdateType_MAX =
    ServiceDirectoryDomainUpdatePB_UpdateType_UpdateType_MAX;
  static constexpr int UpdateType_ARRAYSIZE =
    ServiceDirectoryDomainUpdatePB_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UpdateType_descriptor() {
    return ServiceDirectoryDomainUpdatePB_UpdateType_descriptor();
  }
  template<typename T>
  static inline const std::string& UpdateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdateType_Name.");
    return ServiceDirectoryDomainUpdatePB_UpdateType_Name(enum_t_value);
  }
  static inline bool UpdateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UpdateType* value) {
    return ServiceDirectoryDomainUpdatePB_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKnownDomainsFieldNumber = 1,
    kUpdateDomainFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // repeated string known_domains = 1;
  int known_domains_size() const;
  private:
  int _internal_known_domains_size() const;
  public:
  void clear_known_domains();
  const std::string& known_domains(int index) const;
  std::string* mutable_known_domains(int index);
  void set_known_domains(int index, const std::string& value);
  void set_known_domains(int index, std::string&& value);
  void set_known_domains(int index, const char* value);
  void set_known_domains(int index, const char* value, size_t size);
  std::string* add_known_domains();
  void add_known_domains(const std::string& value);
  void add_known_domains(std::string&& value);
  void add_known_domains(const char* value);
  void add_known_domains(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& known_domains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_known_domains();
  private:
  const std::string& _internal_known_domains(int index) const;
  std::string* _internal_add_known_domains();
  public:

  // optional string update_domain = 3;
  bool has_update_domain() const;
  private:
  bool _internal_has_update_domain() const;
  public:
  void clear_update_domain();
  const std::string& update_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_domain();
  PROTOBUF_NODISCARD std::string* release_update_domain();
  void set_allocated_update_domain(std::string* update_domain);
  private:
  const std::string& _internal_update_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_domain(const std::string& value);
  std::string* _internal_mutable_update_domain();
  public:

  // optional .gravity.ServiceDirectoryDomainUpdatePB.UpdateType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gravity::ServiceDirectoryDomainUpdatePB_UpdateType type() const;
  void set_type(::gravity::ServiceDirectoryDomainUpdatePB_UpdateType value);
  private:
  ::gravity::ServiceDirectoryDomainUpdatePB_UpdateType _internal_type() const;
  void _internal_set_type(::gravity::ServiceDirectoryDomainUpdatePB_UpdateType value);
  public:

  // @@protoc_insertion_point(class_scope:gravity.ServiceDirectoryDomainUpdatePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> known_domains_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_domain_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceDirectoryDomainUpdatePB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceDirectoryDomainUpdatePB

// repeated string known_domains = 1;
inline int ServiceDirectoryDomainUpdatePB::_internal_known_domains_size() const {
  return _impl_.known_domains_.size();
}
inline int ServiceDirectoryDomainUpdatePB::known_domains_size() const {
  return _internal_known_domains_size();
}
inline void ServiceDirectoryDomainUpdatePB::clear_known_domains() {
  _impl_.known_domains_.Clear();
}
inline std::string* ServiceDirectoryDomainUpdatePB::add_known_domains() {
  std::string* _s = _internal_add_known_domains();
  // @@protoc_insertion_point(field_add_mutable:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
  return _s;
}
inline const std::string& ServiceDirectoryDomainUpdatePB::_internal_known_domains(int index) const {
  return _impl_.known_domains_.Get(index);
}
inline const std::string& ServiceDirectoryDomainUpdatePB::known_domains(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
  return _internal_known_domains(index);
}
inline std::string* ServiceDirectoryDomainUpdatePB::mutable_known_domains(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
  return _impl_.known_domains_.Mutable(index);
}
inline void ServiceDirectoryDomainUpdatePB::set_known_domains(int index, const std::string& value) {
  _impl_.known_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
}
inline void ServiceDirectoryDomainUpdatePB::set_known_domains(int index, std::string&& value) {
  _impl_.known_domains_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
}
inline void ServiceDirectoryDomainUpdatePB::set_known_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.known_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
}
inline void ServiceDirectoryDomainUpdatePB::set_known_domains(int index, const char* value, size_t size) {
  _impl_.known_domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
}
inline std::string* ServiceDirectoryDomainUpdatePB::_internal_add_known_domains() {
  return _impl_.known_domains_.Add();
}
inline void ServiceDirectoryDomainUpdatePB::add_known_domains(const std::string& value) {
  _impl_.known_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
}
inline void ServiceDirectoryDomainUpdatePB::add_known_domains(std::string&& value) {
  _impl_.known_domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
}
inline void ServiceDirectoryDomainUpdatePB::add_known_domains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.known_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
}
inline void ServiceDirectoryDomainUpdatePB::add_known_domains(const char* value, size_t size) {
  _impl_.known_domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServiceDirectoryDomainUpdatePB::known_domains() const {
  // @@protoc_insertion_point(field_list:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
  return _impl_.known_domains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServiceDirectoryDomainUpdatePB::mutable_known_domains() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ServiceDirectoryDomainUpdatePB.known_domains)
  return &_impl_.known_domains_;
}

// optional .gravity.ServiceDirectoryDomainUpdatePB.UpdateType type = 2;
inline bool ServiceDirectoryDomainUpdatePB::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceDirectoryDomainUpdatePB::has_type() const {
  return _internal_has_type();
}
inline void ServiceDirectoryDomainUpdatePB::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::gravity::ServiceDirectoryDomainUpdatePB_UpdateType ServiceDirectoryDomainUpdatePB::_internal_type() const {
  return static_cast< ::gravity::ServiceDirectoryDomainUpdatePB_UpdateType >(_impl_.type_);
}
inline ::gravity::ServiceDirectoryDomainUpdatePB_UpdateType ServiceDirectoryDomainUpdatePB::type() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryDomainUpdatePB.type)
  return _internal_type();
}
inline void ServiceDirectoryDomainUpdatePB::_internal_set_type(::gravity::ServiceDirectoryDomainUpdatePB_UpdateType value) {
  assert(::gravity::ServiceDirectoryDomainUpdatePB_UpdateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void ServiceDirectoryDomainUpdatePB::set_type(::gravity::ServiceDirectoryDomainUpdatePB_UpdateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryDomainUpdatePB.type)
}

// optional string update_domain = 3;
inline bool ServiceDirectoryDomainUpdatePB::_internal_has_update_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceDirectoryDomainUpdatePB::has_update_domain() const {
  return _internal_has_update_domain();
}
inline void ServiceDirectoryDomainUpdatePB::clear_update_domain() {
  _impl_.update_domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceDirectoryDomainUpdatePB::update_domain() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryDomainUpdatePB.update_domain)
  return _internal_update_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryDomainUpdatePB::set_update_domain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.update_domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryDomainUpdatePB.update_domain)
}
inline std::string* ServiceDirectoryDomainUpdatePB::mutable_update_domain() {
  std::string* _s = _internal_mutable_update_domain();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryDomainUpdatePB.update_domain)
  return _s;
}
inline const std::string& ServiceDirectoryDomainUpdatePB::_internal_update_domain() const {
  return _impl_.update_domain_.Get();
}
inline void ServiceDirectoryDomainUpdatePB::_internal_set_update_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.update_domain_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryDomainUpdatePB::_internal_mutable_update_domain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.update_domain_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryDomainUpdatePB::release_update_domain() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryDomainUpdatePB.update_domain)
  if (!_internal_has_update_domain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.update_domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_domain_.IsDefault()) {
    _impl_.update_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryDomainUpdatePB::set_allocated_update_domain(std::string* update_domain) {
  if (update_domain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.update_domain_.SetAllocated(update_domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_domain_.IsDefault()) {
    _impl_.update_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryDomainUpdatePB.update_domain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gravity

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gravity::ServiceDirectoryDomainUpdatePB_UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gravity::ServiceDirectoryDomainUpdatePB_UpdateType>() {
  return ::gravity::ServiceDirectoryDomainUpdatePB_UpdateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryDomainUpdatePB_2eproto
