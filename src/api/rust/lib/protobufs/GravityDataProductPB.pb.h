// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GravityDataProductPB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GravityDataProductPB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GravityDataProductPB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GravityDataProductPB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GravityDataProductPB_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GravityDataProductPB_2eproto;
namespace gravity {
class GravityDataProductPB;
struct GravityDataProductPBDefaultTypeInternal;
extern GravityDataProductPBDefaultTypeInternal _GravityDataProductPB_default_instance_;
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> ::gravity::GravityDataProductPB* Arena::CreateMaybeMessage<::gravity::GravityDataProductPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gravity {

// ===================================================================

class GravityDataProductPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.GravityDataProductPB) */ {
 public:
  inline GravityDataProductPB() : GravityDataProductPB(nullptr) {}
  ~GravityDataProductPB() override;
  explicit PROTOBUF_CONSTEXPR GravityDataProductPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GravityDataProductPB(const GravityDataProductPB& from);
  GravityDataProductPB(GravityDataProductPB&& from) noexcept
    : GravityDataProductPB() {
    *this = ::std::move(from);
  }

  inline GravityDataProductPB& operator=(const GravityDataProductPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline GravityDataProductPB& operator=(GravityDataProductPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GravityDataProductPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const GravityDataProductPB* internal_default_instance() {
    return reinterpret_cast<const GravityDataProductPB*>(
               &_GravityDataProductPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GravityDataProductPB& a, GravityDataProductPB& b) {
    a.Swap(&b);
  }
  inline void Swap(GravityDataProductPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GravityDataProductPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GravityDataProductPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GravityDataProductPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GravityDataProductPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GravityDataProductPB& from) {
    GravityDataProductPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GravityDataProductPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.GravityDataProductPB";
  }
  protected:
  explicit GravityDataProductPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataProductIDFieldNumber = 2,
    kSoftwareVersionFieldNumber = 3,
    kDataFieldNumber = 4,
    kComponentIDFieldNumber = 5,
    kDomainFieldNumber = 6,
    kFutureSocketUrlFieldNumber = 8,
    kProtocolFieldNumber = 12,
    kTypeNameFieldNumber = 13,
    kTimestampFieldNumber = 1,
    kReceivedTimestampFieldNumber = 9,
    kFutureResponseFieldNumber = 7,
    kIsCachedDataproductFieldNumber = 10,
    kIsRelayedDataproductFieldNumber = 11,
    kRegistrationTimeFieldNumber = 14,
  };
  // optional string dataProductID = 2;
  bool has_dataproductid() const;
  private:
  bool _internal_has_dataproductid() const;
  public:
  void clear_dataproductid();
  const std::string& dataproductid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataproductid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataproductid();
  PROTOBUF_NODISCARD std::string* release_dataproductid();
  void set_allocated_dataproductid(std::string* dataproductid);
  private:
  const std::string& _internal_dataproductid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataproductid(const std::string& value);
  std::string* _internal_mutable_dataproductid();
  public:

  // optional string softwareVersion = 3;
  bool has_softwareversion() const;
  private:
  bool _internal_has_softwareversion() const;
  public:
  void clear_softwareversion();
  const std::string& softwareversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_softwareversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_softwareversion();
  PROTOBUF_NODISCARD std::string* release_softwareversion();
  void set_allocated_softwareversion(std::string* softwareversion);
  private:
  const std::string& _internal_softwareversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_softwareversion(const std::string& value);
  std::string* _internal_mutable_softwareversion();
  public:

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional string componentID = 5;
  bool has_componentid() const;
  private:
  bool _internal_has_componentid() const;
  public:
  void clear_componentid();
  const std::string& componentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_componentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_componentid();
  PROTOBUF_NODISCARD std::string* release_componentid();
  void set_allocated_componentid(std::string* componentid);
  private:
  const std::string& _internal_componentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_componentid(const std::string& value);
  std::string* _internal_mutable_componentid();
  public:

  // optional string domain = 6;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional string future_socket_url = 8;
  bool has_future_socket_url() const;
  private:
  bool _internal_has_future_socket_url() const;
  public:
  void clear_future_socket_url();
  const std::string& future_socket_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_future_socket_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_future_socket_url();
  PROTOBUF_NODISCARD std::string* release_future_socket_url();
  void set_allocated_future_socket_url(std::string* future_socket_url);
  private:
  const std::string& _internal_future_socket_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_future_socket_url(const std::string& value);
  std::string* _internal_mutable_future_socket_url();
  public:

  // optional string protocol = 12 [default = ""];
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const std::string& protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // optional string type_name = 13 [default = ""];
  bool has_type_name() const;
  private:
  bool _internal_has_type_name() const;
  public:
  void clear_type_name();
  const std::string& type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_name();
  PROTOBUF_NODISCARD std::string* release_type_name();
  void set_allocated_type_name(std::string* type_name);
  private:
  const std::string& _internal_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_name(const std::string& value);
  std::string* _internal_mutable_type_name();
  public:

  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // optional uint64 received_timestamp = 9;
  bool has_received_timestamp() const;
  private:
  bool _internal_has_received_timestamp() const;
  public:
  void clear_received_timestamp();
  uint64_t received_timestamp() const;
  void set_received_timestamp(uint64_t value);
  private:
  uint64_t _internal_received_timestamp() const;
  void _internal_set_received_timestamp(uint64_t value);
  public:

  // optional bool future_response = 7;
  bool has_future_response() const;
  private:
  bool _internal_has_future_response() const;
  public:
  void clear_future_response();
  bool future_response() const;
  void set_future_response(bool value);
  private:
  bool _internal_future_response() const;
  void _internal_set_future_response(bool value);
  public:

  // optional bool is_cached_dataproduct = 10;
  bool has_is_cached_dataproduct() const;
  private:
  bool _internal_has_is_cached_dataproduct() const;
  public:
  void clear_is_cached_dataproduct();
  bool is_cached_dataproduct() const;
  void set_is_cached_dataproduct(bool value);
  private:
  bool _internal_is_cached_dataproduct() const;
  void _internal_set_is_cached_dataproduct(bool value);
  public:

  // optional bool is_relayed_dataproduct = 11 [default = false];
  bool has_is_relayed_dataproduct() const;
  private:
  bool _internal_has_is_relayed_dataproduct() const;
  public:
  void clear_is_relayed_dataproduct();
  bool is_relayed_dataproduct() const;
  void set_is_relayed_dataproduct(bool value);
  private:
  bool _internal_is_relayed_dataproduct() const;
  void _internal_set_is_relayed_dataproduct(bool value);
  public:

  // optional uint32 registration_time = 14;
  bool has_registration_time() const;
  private:
  bool _internal_has_registration_time() const;
  public:
  void clear_registration_time();
  uint32_t registration_time() const;
  void set_registration_time(uint32_t value);
  private:
  uint32_t _internal_registration_time() const;
  void _internal_set_registration_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gravity.GravityDataProductPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataproductid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr softwareversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr componentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr future_socket_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_name_;
    uint64_t timestamp_;
    uint64_t received_timestamp_;
    bool future_response_;
    bool is_cached_dataproduct_;
    bool is_relayed_dataproduct_;
    uint32_t registration_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GravityDataProductPB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GravityDataProductPB

// optional uint64 timestamp = 1;
inline bool GravityDataProductPB::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void GravityDataProductPB::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t GravityDataProductPB::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t GravityDataProductPB::timestamp() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.timestamp)
  return _internal_timestamp();
}
inline void GravityDataProductPB::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.timestamp_ = value;
}
inline void GravityDataProductPB::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.timestamp)
}

// optional string dataProductID = 2;
inline bool GravityDataProductPB::_internal_has_dataproductid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_dataproductid() const {
  return _internal_has_dataproductid();
}
inline void GravityDataProductPB::clear_dataproductid() {
  _impl_.dataproductid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GravityDataProductPB::dataproductid() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.dataProductID)
  return _internal_dataproductid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GravityDataProductPB::set_dataproductid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.dataproductid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.dataProductID)
}
inline std::string* GravityDataProductPB::mutable_dataproductid() {
  std::string* _s = _internal_mutable_dataproductid();
  // @@protoc_insertion_point(field_mutable:gravity.GravityDataProductPB.dataProductID)
  return _s;
}
inline const std::string& GravityDataProductPB::_internal_dataproductid() const {
  return _impl_.dataproductid_.Get();
}
inline void GravityDataProductPB::_internal_set_dataproductid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dataproductid_.Set(value, GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::_internal_mutable_dataproductid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dataproductid_.Mutable(GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::release_dataproductid() {
  // @@protoc_insertion_point(field_release:gravity.GravityDataProductPB.dataProductID)
  if (!_internal_has_dataproductid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.dataproductid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataproductid_.IsDefault()) {
    _impl_.dataproductid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GravityDataProductPB::set_allocated_dataproductid(std::string* dataproductid) {
  if (dataproductid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dataproductid_.SetAllocated(dataproductid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataproductid_.IsDefault()) {
    _impl_.dataproductid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.GravityDataProductPB.dataProductID)
}

// optional string softwareVersion = 3;
inline bool GravityDataProductPB::_internal_has_softwareversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_softwareversion() const {
  return _internal_has_softwareversion();
}
inline void GravityDataProductPB::clear_softwareversion() {
  _impl_.softwareversion_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GravityDataProductPB::softwareversion() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.softwareVersion)
  return _internal_softwareversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GravityDataProductPB::set_softwareversion(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.softwareversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.softwareVersion)
}
inline std::string* GravityDataProductPB::mutable_softwareversion() {
  std::string* _s = _internal_mutable_softwareversion();
  // @@protoc_insertion_point(field_mutable:gravity.GravityDataProductPB.softwareVersion)
  return _s;
}
inline const std::string& GravityDataProductPB::_internal_softwareversion() const {
  return _impl_.softwareversion_.Get();
}
inline void GravityDataProductPB::_internal_set_softwareversion(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.softwareversion_.Set(value, GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::_internal_mutable_softwareversion() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.softwareversion_.Mutable(GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::release_softwareversion() {
  // @@protoc_insertion_point(field_release:gravity.GravityDataProductPB.softwareVersion)
  if (!_internal_has_softwareversion()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.softwareversion_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.softwareversion_.IsDefault()) {
    _impl_.softwareversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GravityDataProductPB::set_allocated_softwareversion(std::string* softwareversion) {
  if (softwareversion != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.softwareversion_.SetAllocated(softwareversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.softwareversion_.IsDefault()) {
    _impl_.softwareversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.GravityDataProductPB.softwareVersion)
}

// optional bytes data = 4;
inline bool GravityDataProductPB::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_data() const {
  return _internal_has_data();
}
inline void GravityDataProductPB::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GravityDataProductPB::data() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GravityDataProductPB::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.data)
}
inline std::string* GravityDataProductPB::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:gravity.GravityDataProductPB.data)
  return _s;
}
inline const std::string& GravityDataProductPB::_internal_data() const {
  return _impl_.data_.Get();
}
inline void GravityDataProductPB::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::release_data() {
  // @@protoc_insertion_point(field_release:gravity.GravityDataProductPB.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GravityDataProductPB::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.GravityDataProductPB.data)
}

// optional string componentID = 5;
inline bool GravityDataProductPB::_internal_has_componentid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_componentid() const {
  return _internal_has_componentid();
}
inline void GravityDataProductPB::clear_componentid() {
  _impl_.componentid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GravityDataProductPB::componentid() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.componentID)
  return _internal_componentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GravityDataProductPB::set_componentid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.componentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.componentID)
}
inline std::string* GravityDataProductPB::mutable_componentid() {
  std::string* _s = _internal_mutable_componentid();
  // @@protoc_insertion_point(field_mutable:gravity.GravityDataProductPB.componentID)
  return _s;
}
inline const std::string& GravityDataProductPB::_internal_componentid() const {
  return _impl_.componentid_.Get();
}
inline void GravityDataProductPB::_internal_set_componentid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.componentid_.Set(value, GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::_internal_mutable_componentid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.componentid_.Mutable(GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::release_componentid() {
  // @@protoc_insertion_point(field_release:gravity.GravityDataProductPB.componentID)
  if (!_internal_has_componentid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.componentid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.componentid_.IsDefault()) {
    _impl_.componentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GravityDataProductPB::set_allocated_componentid(std::string* componentid) {
  if (componentid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.componentid_.SetAllocated(componentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.componentid_.IsDefault()) {
    _impl_.componentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.GravityDataProductPB.componentID)
}

// optional string domain = 6;
inline bool GravityDataProductPB::_internal_has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_domain() const {
  return _internal_has_domain();
}
inline void GravityDataProductPB::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& GravityDataProductPB::domain() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GravityDataProductPB::set_domain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.domain)
}
inline std::string* GravityDataProductPB::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:gravity.GravityDataProductPB.domain)
  return _s;
}
inline const std::string& GravityDataProductPB::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void GravityDataProductPB::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::release_domain() {
  // @@protoc_insertion_point(field_release:gravity.GravityDataProductPB.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GravityDataProductPB::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.GravityDataProductPB.domain)
}

// optional bool future_response = 7;
inline bool GravityDataProductPB::_internal_has_future_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_future_response() const {
  return _internal_has_future_response();
}
inline void GravityDataProductPB::clear_future_response() {
  _impl_.future_response_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool GravityDataProductPB::_internal_future_response() const {
  return _impl_.future_response_;
}
inline bool GravityDataProductPB::future_response() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.future_response)
  return _internal_future_response();
}
inline void GravityDataProductPB::_internal_set_future_response(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.future_response_ = value;
}
inline void GravityDataProductPB::set_future_response(bool value) {
  _internal_set_future_response(value);
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.future_response)
}

// optional string future_socket_url = 8;
inline bool GravityDataProductPB::_internal_has_future_socket_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_future_socket_url() const {
  return _internal_has_future_socket_url();
}
inline void GravityDataProductPB::clear_future_socket_url() {
  _impl_.future_socket_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& GravityDataProductPB::future_socket_url() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.future_socket_url)
  return _internal_future_socket_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GravityDataProductPB::set_future_socket_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.future_socket_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.future_socket_url)
}
inline std::string* GravityDataProductPB::mutable_future_socket_url() {
  std::string* _s = _internal_mutable_future_socket_url();
  // @@protoc_insertion_point(field_mutable:gravity.GravityDataProductPB.future_socket_url)
  return _s;
}
inline const std::string& GravityDataProductPB::_internal_future_socket_url() const {
  return _impl_.future_socket_url_.Get();
}
inline void GravityDataProductPB::_internal_set_future_socket_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.future_socket_url_.Set(value, GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::_internal_mutable_future_socket_url() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.future_socket_url_.Mutable(GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::release_future_socket_url() {
  // @@protoc_insertion_point(field_release:gravity.GravityDataProductPB.future_socket_url)
  if (!_internal_has_future_socket_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.future_socket_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.future_socket_url_.IsDefault()) {
    _impl_.future_socket_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GravityDataProductPB::set_allocated_future_socket_url(std::string* future_socket_url) {
  if (future_socket_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.future_socket_url_.SetAllocated(future_socket_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.future_socket_url_.IsDefault()) {
    _impl_.future_socket_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.GravityDataProductPB.future_socket_url)
}

// optional uint64 received_timestamp = 9;
inline bool GravityDataProductPB::_internal_has_received_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_received_timestamp() const {
  return _internal_has_received_timestamp();
}
inline void GravityDataProductPB::clear_received_timestamp() {
  _impl_.received_timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t GravityDataProductPB::_internal_received_timestamp() const {
  return _impl_.received_timestamp_;
}
inline uint64_t GravityDataProductPB::received_timestamp() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.received_timestamp)
  return _internal_received_timestamp();
}
inline void GravityDataProductPB::_internal_set_received_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.received_timestamp_ = value;
}
inline void GravityDataProductPB::set_received_timestamp(uint64_t value) {
  _internal_set_received_timestamp(value);
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.received_timestamp)
}

// optional bool is_cached_dataproduct = 10;
inline bool GravityDataProductPB::_internal_has_is_cached_dataproduct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_is_cached_dataproduct() const {
  return _internal_has_is_cached_dataproduct();
}
inline void GravityDataProductPB::clear_is_cached_dataproduct() {
  _impl_.is_cached_dataproduct_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool GravityDataProductPB::_internal_is_cached_dataproduct() const {
  return _impl_.is_cached_dataproduct_;
}
inline bool GravityDataProductPB::is_cached_dataproduct() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.is_cached_dataproduct)
  return _internal_is_cached_dataproduct();
}
inline void GravityDataProductPB::_internal_set_is_cached_dataproduct(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_cached_dataproduct_ = value;
}
inline void GravityDataProductPB::set_is_cached_dataproduct(bool value) {
  _internal_set_is_cached_dataproduct(value);
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.is_cached_dataproduct)
}

// optional bool is_relayed_dataproduct = 11 [default = false];
inline bool GravityDataProductPB::_internal_has_is_relayed_dataproduct() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_is_relayed_dataproduct() const {
  return _internal_has_is_relayed_dataproduct();
}
inline void GravityDataProductPB::clear_is_relayed_dataproduct() {
  _impl_.is_relayed_dataproduct_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool GravityDataProductPB::_internal_is_relayed_dataproduct() const {
  return _impl_.is_relayed_dataproduct_;
}
inline bool GravityDataProductPB::is_relayed_dataproduct() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.is_relayed_dataproduct)
  return _internal_is_relayed_dataproduct();
}
inline void GravityDataProductPB::_internal_set_is_relayed_dataproduct(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.is_relayed_dataproduct_ = value;
}
inline void GravityDataProductPB::set_is_relayed_dataproduct(bool value) {
  _internal_set_is_relayed_dataproduct(value);
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.is_relayed_dataproduct)
}

// optional string protocol = 12 [default = ""];
inline bool GravityDataProductPB::_internal_has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_protocol() const {
  return _internal_has_protocol();
}
inline void GravityDataProductPB::clear_protocol() {
  _impl_.protocol_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& GravityDataProductPB::protocol() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.protocol)
  return _internal_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GravityDataProductPB::set_protocol(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.protocol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.protocol)
}
inline std::string* GravityDataProductPB::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:gravity.GravityDataProductPB.protocol)
  return _s;
}
inline const std::string& GravityDataProductPB::_internal_protocol() const {
  return _impl_.protocol_.Get();
}
inline void GravityDataProductPB::_internal_set_protocol(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.protocol_.Set(value, GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::_internal_mutable_protocol() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.protocol_.Mutable(GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::release_protocol() {
  // @@protoc_insertion_point(field_release:gravity.GravityDataProductPB.protocol)
  if (!_internal_has_protocol()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.protocol_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GravityDataProductPB::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.protocol_.SetAllocated(protocol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.protocol_.IsDefault()) {
    _impl_.protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.GravityDataProductPB.protocol)
}

// optional string type_name = 13 [default = ""];
inline bool GravityDataProductPB::_internal_has_type_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_type_name() const {
  return _internal_has_type_name();
}
inline void GravityDataProductPB::clear_type_name() {
  _impl_.type_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& GravityDataProductPB::type_name() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.type_name)
  return _internal_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GravityDataProductPB::set_type_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.type_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.type_name)
}
inline std::string* GravityDataProductPB::mutable_type_name() {
  std::string* _s = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:gravity.GravityDataProductPB.type_name)
  return _s;
}
inline const std::string& GravityDataProductPB::_internal_type_name() const {
  return _impl_.type_name_.Get();
}
inline void GravityDataProductPB::_internal_set_type_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::_internal_mutable_type_name() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.type_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GravityDataProductPB::release_type_name() {
  // @@protoc_insertion_point(field_release:gravity.GravityDataProductPB.type_name)
  if (!_internal_has_type_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.type_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_name_.IsDefault()) {
    _impl_.type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GravityDataProductPB::set_allocated_type_name(std::string* type_name) {
  if (type_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.type_name_.SetAllocated(type_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_name_.IsDefault()) {
    _impl_.type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.GravityDataProductPB.type_name)
}

// optional uint32 registration_time = 14;
inline bool GravityDataProductPB::_internal_has_registration_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool GravityDataProductPB::has_registration_time() const {
  return _internal_has_registration_time();
}
inline void GravityDataProductPB::clear_registration_time() {
  _impl_.registration_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t GravityDataProductPB::_internal_registration_time() const {
  return _impl_.registration_time_;
}
inline uint32_t GravityDataProductPB::registration_time() const {
  // @@protoc_insertion_point(field_get:gravity.GravityDataProductPB.registration_time)
  return _internal_registration_time();
}
inline void GravityDataProductPB::_internal_set_registration_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.registration_time_ = value;
}
inline void GravityDataProductPB::set_registration_time(uint32_t value) {
  _internal_set_registration_time(value);
  // @@protoc_insertion_point(field_set:gravity.GravityDataProductPB.registration_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gravity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GravityDataProductPB_2eproto
