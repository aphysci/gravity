// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDirectoryMapPB.proto

#include "ServiceDirectoryMapPB.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gravity {
PROTOBUF_CONSTEXPR ProductLocations::ProductLocations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{}
  , /*decltype(_impl_.component_id_)*/{}
  , /*decltype(_impl_.domain_id_)*/{}
  , /*decltype(_impl_.timestamp_)*/{}
  , /*decltype(_impl_.product_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ProductLocationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductLocationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductLocationsDefaultTypeInternal() {}
  union {
    ProductLocations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductLocationsDefaultTypeInternal _ProductLocations_default_instance_;
PROTOBUF_CONSTEXPR ProductChange::ProductChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.product_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.registration_type_)*/0
  , /*decltype(_impl_.change_type_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}} {}
struct ProductChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductChangeDefaultTypeInternal() {}
  union {
    ProductChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductChangeDefaultTypeInternal _ProductChange_default_instance_;
PROTOBUF_CONSTEXPR ServiceDirectoryMapPB::ServiceDirectoryMapPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_provider_)*/{}
  , /*decltype(_impl_.data_provider_)*/{}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.change_)*/nullptr} {}
struct ServiceDirectoryMapPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceDirectoryMapPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceDirectoryMapPBDefaultTypeInternal() {}
  union {
    ServiceDirectoryMapPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceDirectoryMapPBDefaultTypeInternal _ServiceDirectoryMapPB_default_instance_;
}  // namespace gravity
static ::_pb::Metadata file_level_metadata_ServiceDirectoryMapPB_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ServiceDirectoryMapPB_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ServiceDirectoryMapPB_2eproto = nullptr;

const uint32_t TableStruct_ServiceDirectoryMapPB_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gravity::ProductLocations, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductLocations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gravity::ProductLocations, _impl_.product_id_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductLocations, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductLocations, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductLocations, _impl_.domain_id_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductLocations, _impl_.timestamp_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gravity::ProductChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gravity::ProductChange, _impl_.product_id_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductChange, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductChange, _impl_.registration_type_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductChange, _impl_.change_type_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductChange, _impl_.component_id_),
  PROTOBUF_FIELD_OFFSET(::gravity::ProductChange, _impl_.timestamp_),
  0,
  1,
  3,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryMapPB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryMapPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryMapPB, _impl_.service_provider_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryMapPB, _impl_.data_provider_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryMapPB, _impl_.change_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryMapPB, _impl_.domain_),
  ~0u,
  ~0u,
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::gravity::ProductLocations)},
  { 16, 28, -1, sizeof(::gravity::ProductChange)},
  { 34, 44, -1, sizeof(::gravity::ServiceDirectoryMapPB)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gravity::_ProductLocations_default_instance_._instance,
  &::gravity::_ProductChange_default_instance_._instance,
  &::gravity::_ServiceDirectoryMapPB_default_instance_._instance,
};

const char descriptor_table_protodef_ServiceDirectoryMapPB_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033ServiceDirectoryMapPB.proto\022\007gravity\"o"
  "\n\020ProductLocations\022\022\n\nproduct_id\030\001 \001(\t\022\013"
  "\n\003url\030\002 \003(\t\022\024\n\014component_id\030\003 \003(\t\022\021\n\tdom"
  "ain_id\030\004 \003(\t\022\021\n\ttimestamp\030\005 \003(\004\"\243\002\n\rProd"
  "uctChange\022\022\n\nproduct_id\030\001 \001(\t\022\013\n\003url\030\002 \001"
  "(\t\022B\n\021registration_type\030\003 \001(\0162\'.gravity."
  "ProductChange.RegistrationType\0226\n\013change"
  "_type\030\004 \001(\0162!.gravity.ProductChange.Chan"
  "geType\022\024\n\014component_id\030\005 \001(\t\022\021\n\ttimestam"
  "p\030\006 \001(\004\")\n\020RegistrationType\022\010\n\004DATA\020\000\022\013\n"
  "\007SERVICE\020\001\"!\n\nChangeType\022\n\n\006REMOVE\020\000\022\007\n\003"
  "ADD\020\001\"\266\001\n\025ServiceDirectoryMapPB\0223\n\020servi"
  "ce_provider\030\001 \003(\0132\031.gravity.ProductLocat"
  "ions\0220\n\rdata_provider\030\002 \003(\0132\031.gravity.Pr"
  "oductLocations\022&\n\006change\030\003 \001(\0132\026.gravity"
  ".ProductChange\022\016\n\006domain\030\004 \001(\tB>\n\034com.ap"
  "hysci.gravity.protobufB\034ServiceDirectory"
  "MapContainerH\001"
  ;
static ::_pbi::once_flag descriptor_table_ServiceDirectoryMapPB_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ServiceDirectoryMapPB_2eproto = {
    false, false, 694, descriptor_table_protodef_ServiceDirectoryMapPB_2eproto,
    "ServiceDirectoryMapPB.proto",
    &descriptor_table_ServiceDirectoryMapPB_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_ServiceDirectoryMapPB_2eproto::offsets,
    file_level_metadata_ServiceDirectoryMapPB_2eproto, file_level_enum_descriptors_ServiceDirectoryMapPB_2eproto,
    file_level_service_descriptors_ServiceDirectoryMapPB_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ServiceDirectoryMapPB_2eproto_getter() {
  return &descriptor_table_ServiceDirectoryMapPB_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ServiceDirectoryMapPB_2eproto(&descriptor_table_ServiceDirectoryMapPB_2eproto);
namespace gravity {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductChange_RegistrationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ServiceDirectoryMapPB_2eproto);
  return file_level_enum_descriptors_ServiceDirectoryMapPB_2eproto[0];
}
bool ProductChange_RegistrationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProductChange_RegistrationType ProductChange::DATA;
constexpr ProductChange_RegistrationType ProductChange::SERVICE;
constexpr ProductChange_RegistrationType ProductChange::RegistrationType_MIN;
constexpr ProductChange_RegistrationType ProductChange::RegistrationType_MAX;
constexpr int ProductChange::RegistrationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductChange_ChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ServiceDirectoryMapPB_2eproto);
  return file_level_enum_descriptors_ServiceDirectoryMapPB_2eproto[1];
}
bool ProductChange_ChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProductChange_ChangeType ProductChange::REMOVE;
constexpr ProductChange_ChangeType ProductChange::ADD;
constexpr ProductChange_ChangeType ProductChange::ChangeType_MIN;
constexpr ProductChange_ChangeType ProductChange::ChangeType_MAX;
constexpr int ProductChange::ChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProductLocations::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductLocations>()._impl_._has_bits_);
  static void set_has_product_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProductLocations::ProductLocations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gravity.ProductLocations)
}
ProductLocations::ProductLocations(const ProductLocations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductLocations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){from._impl_.url_}
    , decltype(_impl_.component_id_){from._impl_.component_id_}
    , decltype(_impl_.domain_id_){from._impl_.domain_id_}
    , decltype(_impl_.timestamp_){from._impl_.timestamp_}
    , decltype(_impl_.product_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.product_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product_id()) {
    _this->_impl_.product_id_.Set(from._internal_product_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gravity.ProductLocations)
}

inline void ProductLocations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){arena}
    , decltype(_impl_.component_id_){arena}
    , decltype(_impl_.domain_id_){arena}
    , decltype(_impl_.timestamp_){arena}
    , decltype(_impl_.product_id_){}
  };
  _impl_.product_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProductLocations::~ProductLocations() {
  // @@protoc_insertion_point(destructor:gravity.ProductLocations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductLocations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.~RepeatedPtrField();
  _impl_.component_id_.~RepeatedPtrField();
  _impl_.domain_id_.~RepeatedPtrField();
  _impl_.timestamp_.~RepeatedField();
  _impl_.product_id_.Destroy();
}

void ProductLocations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductLocations::Clear() {
// @@protoc_insertion_point(message_clear_start:gravity.ProductLocations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.Clear();
  _impl_.component_id_.Clear();
  _impl_.domain_id_.Clear();
  _impl_.timestamp_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.product_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductLocations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string product_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_product_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ProductLocations.product_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_url();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "gravity.ProductLocations.url");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string component_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_component_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "gravity.ProductLocations.component_id");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string domain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_domain_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "gravity.ProductLocations.domain_id");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductLocations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gravity.ProductLocations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string product_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ProductLocations.product_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_id(), target);
  }

  // repeated string url = 2;
  for (int i = 0, n = this->_internal_url_size(); i < n; i++) {
    const auto& s = this->_internal_url(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ProductLocations.url");
    target = stream->WriteString(2, s, target);
  }

  // repeated string component_id = 3;
  for (int i = 0, n = this->_internal_component_id_size(); i < n; i++) {
    const auto& s = this->_internal_component_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ProductLocations.component_id");
    target = stream->WriteString(3, s, target);
  }

  // repeated string domain_id = 4;
  for (int i = 0, n = this->_internal_domain_id_size(); i < n; i++) {
    const auto& s = this->_internal_domain_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ProductLocations.domain_id");
    target = stream->WriteString(4, s, target);
  }

  // repeated uint64 timestamp = 5;
  for (int i = 0, n = this->_internal_timestamp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gravity.ProductLocations)
  return target;
}

size_t ProductLocations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gravity.ProductLocations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string url = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.url_.size());
  for (int i = 0, n = _impl_.url_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.url_.Get(i));
  }

  // repeated string component_id = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.component_id_.size());
  for (int i = 0, n = _impl_.component_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.component_id_.Get(i));
  }

  // repeated string domain_id = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.domain_id_.size());
  for (int i = 0, n = _impl_.domain_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.domain_id_.Get(i));
  }

  // repeated uint64 timestamp = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.timestamp_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_timestamp_size());
    total_size += data_size;
  }

  // optional string product_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductLocations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductLocations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductLocations::GetClassData() const { return &_class_data_; }


void ProductLocations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductLocations*>(&to_msg);
  auto& from = static_cast<const ProductLocations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gravity.ProductLocations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.url_.MergeFrom(from._impl_.url_);
  _this->_impl_.component_id_.MergeFrom(from._impl_.component_id_);
  _this->_impl_.domain_id_.MergeFrom(from._impl_.domain_id_);
  _this->_impl_.timestamp_.MergeFrom(from._impl_.timestamp_);
  if (from._internal_has_product_id()) {
    _this->_internal_set_product_id(from._internal_product_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductLocations::CopyFrom(const ProductLocations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gravity.ProductLocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductLocations::IsInitialized() const {
  return true;
}

void ProductLocations::InternalSwap(ProductLocations* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.url_.InternalSwap(&other->_impl_.url_);
  _impl_.component_id_.InternalSwap(&other->_impl_.component_id_);
  _impl_.domain_id_.InternalSwap(&other->_impl_.domain_id_);
  _impl_.timestamp_.InternalSwap(&other->_impl_.timestamp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_id_, lhs_arena,
      &other->_impl_.product_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductLocations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServiceDirectoryMapPB_2eproto_getter, &descriptor_table_ServiceDirectoryMapPB_2eproto_once,
      file_level_metadata_ServiceDirectoryMapPB_2eproto[0]);
}

// ===================================================================

class ProductChange::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductChange>()._impl_._has_bits_);
  static void set_has_product_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_registration_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_component_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ProductChange::ProductChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gravity.ProductChange)
}
ProductChange::ProductChange(const ProductChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.product_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.component_id_){}
    , decltype(_impl_.registration_type_){}
    , decltype(_impl_.change_type_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.product_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product_id()) {
    _this->_impl_.product_id_.Set(from._internal_product_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_component_id()) {
    _this->_impl_.component_id_.Set(from._internal_component_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.registration_type_, &from._impl_.registration_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.registration_type_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:gravity.ProductChange)
}

inline void ProductChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.product_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.component_id_){}
    , decltype(_impl_.registration_type_){0}
    , decltype(_impl_.change_type_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
  };
  _impl_.product_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProductChange::~ProductChange() {
  // @@protoc_insertion_point(destructor:gravity.ProductChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.product_id_.Destroy();
  _impl_.url_.Destroy();
  _impl_.component_id_.Destroy();
}

void ProductChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductChange::Clear() {
// @@protoc_insertion_point(message_clear_start:gravity.ProductChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.product_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.component_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.registration_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.registration_type_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string product_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_product_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ProductChange.product_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ProductChange.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .gravity.ProductChange.RegistrationType registration_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gravity::ProductChange_RegistrationType_IsValid(val))) {
            _internal_set_registration_type(static_cast<::gravity::ProductChange_RegistrationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .gravity.ProductChange.ChangeType change_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gravity::ProductChange_ChangeType_IsValid(val))) {
            _internal_set_change_type(static_cast<::gravity::ProductChange_ChangeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string component_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_component_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ProductChange.component_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gravity.ProductChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string product_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ProductChange.product_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_id(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ProductChange.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional .gravity.ProductChange.RegistrationType registration_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_registration_type(), target);
  }

  // optional .gravity.ProductChange.ChangeType change_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_change_type(), target);
  }

  // optional string component_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component_id().data(), static_cast<int>(this->_internal_component_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ProductChange.component_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_component_id(), target);
  }

  // optional uint64 timestamp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gravity.ProductChange)
  return target;
}

size_t ProductChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gravity.ProductChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string product_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product_id());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string component_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component_id());
    }

    // optional .gravity.ProductChange.RegistrationType registration_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_registration_type());
    }

    // optional .gravity.ProductChange.ChangeType change_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());
    }

    // optional uint64 timestamp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductChange::GetClassData() const { return &_class_data_; }


void ProductChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductChange*>(&to_msg);
  auto& from = static_cast<const ProductChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gravity.ProductChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_product_id(from._internal_product_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_component_id(from._internal_component_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.registration_type_ = from._impl_.registration_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.change_type_ = from._impl_.change_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductChange::CopyFrom(const ProductChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gravity.ProductChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductChange::IsInitialized() const {
  return true;
}

void ProductChange::InternalSwap(ProductChange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_id_, lhs_arena,
      &other->_impl_.product_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_id_, lhs_arena,
      &other->_impl_.component_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductChange, _impl_.timestamp_)
      + sizeof(ProductChange::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ProductChange, _impl_.registration_type_)>(
          reinterpret_cast<char*>(&_impl_.registration_type_),
          reinterpret_cast<char*>(&other->_impl_.registration_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServiceDirectoryMapPB_2eproto_getter, &descriptor_table_ServiceDirectoryMapPB_2eproto_once,
      file_level_metadata_ServiceDirectoryMapPB_2eproto[1]);
}

// ===================================================================

class ServiceDirectoryMapPB::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceDirectoryMapPB>()._impl_._has_bits_);
  static const ::gravity::ProductChange& change(const ServiceDirectoryMapPB* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::gravity::ProductChange&
ServiceDirectoryMapPB::_Internal::change(const ServiceDirectoryMapPB* msg) {
  return *msg->_impl_.change_;
}
ServiceDirectoryMapPB::ServiceDirectoryMapPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gravity.ServiceDirectoryMapPB)
}
ServiceDirectoryMapPB::ServiceDirectoryMapPB(const ServiceDirectoryMapPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceDirectoryMapPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_provider_){from._impl_.service_provider_}
    , decltype(_impl_.data_provider_){from._impl_.data_provider_}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.change_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_change()) {
    _this->_impl_.change_ = new ::gravity::ProductChange(*from._impl_.change_);
  }
  // @@protoc_insertion_point(copy_constructor:gravity.ServiceDirectoryMapPB)
}

inline void ServiceDirectoryMapPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_provider_){arena}
    , decltype(_impl_.data_provider_){arena}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.change_){nullptr}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceDirectoryMapPB::~ServiceDirectoryMapPB() {
  // @@protoc_insertion_point(destructor:gravity.ServiceDirectoryMapPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceDirectoryMapPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_provider_.~RepeatedPtrField();
  _impl_.data_provider_.~RepeatedPtrField();
  _impl_.domain_.Destroy();
  if (this != internal_default_instance()) delete _impl_.change_;
}

void ServiceDirectoryMapPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceDirectoryMapPB::Clear() {
// @@protoc_insertion_point(message_clear_start:gravity.ServiceDirectoryMapPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_provider_.Clear();
  _impl_.data_provider_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDirectoryMapPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gravity.ProductLocations service_provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_provider(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gravity.ProductLocations data_provider = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_provider(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .gravity.ProductChange change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string domain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ServiceDirectoryMapPB.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceDirectoryMapPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gravity.ServiceDirectoryMapPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gravity.ProductLocations service_provider = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_service_provider_size()); i < n; i++) {
    const auto& repfield = this->_internal_service_provider(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .gravity.ProductLocations data_provider = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_provider_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_provider(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .gravity.ProductChange change = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  // optional string domain = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ServiceDirectoryMapPB.domain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gravity.ServiceDirectoryMapPB)
  return target;
}

size_t ServiceDirectoryMapPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gravity.ServiceDirectoryMapPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gravity.ProductLocations service_provider = 1;
  total_size += 1UL * this->_internal_service_provider_size();
  for (const auto& msg : this->_impl_.service_provider_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gravity.ProductLocations data_provider = 2;
  total_size += 1UL * this->_internal_data_provider_size();
  for (const auto& msg : this->_impl_.data_provider_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string domain = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional .gravity.ProductChange change = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceDirectoryMapPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceDirectoryMapPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceDirectoryMapPB::GetClassData() const { return &_class_data_; }


void ServiceDirectoryMapPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceDirectoryMapPB*>(&to_msg);
  auto& from = static_cast<const ServiceDirectoryMapPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gravity.ServiceDirectoryMapPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.service_provider_.MergeFrom(from._impl_.service_provider_);
  _this->_impl_.data_provider_.MergeFrom(from._impl_.data_provider_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_change()->::gravity::ProductChange::MergeFrom(
          from._internal_change());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceDirectoryMapPB::CopyFrom(const ServiceDirectoryMapPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gravity.ServiceDirectoryMapPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDirectoryMapPB::IsInitialized() const {
  return true;
}

void ServiceDirectoryMapPB::InternalSwap(ServiceDirectoryMapPB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.service_provider_.InternalSwap(&other->_impl_.service_provider_);
  _impl_.data_provider_.InternalSwap(&other->_impl_.data_provider_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  swap(_impl_.change_, other->_impl_.change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDirectoryMapPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServiceDirectoryMapPB_2eproto_getter, &descriptor_table_ServiceDirectoryMapPB_2eproto_once,
      file_level_metadata_ServiceDirectoryMapPB_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gravity::ProductLocations*
Arena::CreateMaybeMessage< ::gravity::ProductLocations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gravity::ProductLocations >(arena);
}
template<> PROTOBUF_NOINLINE ::gravity::ProductChange*
Arena::CreateMaybeMessage< ::gravity::ProductChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gravity::ProductChange >(arena);
}
template<> PROTOBUF_NOINLINE ::gravity::ServiceDirectoryMapPB*
Arena::CreateMaybeMessage< ::gravity::ServiceDirectoryMapPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gravity::ServiceDirectoryMapPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
