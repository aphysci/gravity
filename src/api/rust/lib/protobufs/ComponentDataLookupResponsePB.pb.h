// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComponentDataLookupResponsePB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ComponentDataLookupResponsePB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ComponentDataLookupResponsePB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ComponentDataLookupResponsePB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ComponentDataLookupResponsePB_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ComponentDataLookupResponsePB_2eproto;
namespace gravity {
class ComponentDataLookupResponsePB;
struct ComponentDataLookupResponsePBDefaultTypeInternal;
extern ComponentDataLookupResponsePBDefaultTypeInternal _ComponentDataLookupResponsePB_default_instance_;
class PublisherInfoPB;
struct PublisherInfoPBDefaultTypeInternal;
extern PublisherInfoPBDefaultTypeInternal _PublisherInfoPB_default_instance_;
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> ::gravity::ComponentDataLookupResponsePB* Arena::CreateMaybeMessage<::gravity::ComponentDataLookupResponsePB>(Arena*);
template<> ::gravity::PublisherInfoPB* Arena::CreateMaybeMessage<::gravity::PublisherInfoPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gravity {

// ===================================================================

class PublisherInfoPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.PublisherInfoPB) */ {
 public:
  inline PublisherInfoPB() : PublisherInfoPB(nullptr) {}
  ~PublisherInfoPB() override;
  explicit PROTOBUF_CONSTEXPR PublisherInfoPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublisherInfoPB(const PublisherInfoPB& from);
  PublisherInfoPB(PublisherInfoPB&& from) noexcept
    : PublisherInfoPB() {
    *this = ::std::move(from);
  }

  inline PublisherInfoPB& operator=(const PublisherInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublisherInfoPB& operator=(PublisherInfoPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublisherInfoPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublisherInfoPB* internal_default_instance() {
    return reinterpret_cast<const PublisherInfoPB*>(
               &_PublisherInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublisherInfoPB& a, PublisherInfoPB& b) {
    a.Swap(&b);
  }
  inline void Swap(PublisherInfoPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublisherInfoPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublisherInfoPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublisherInfoPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublisherInfoPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublisherInfoPB& from) {
    PublisherInfoPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublisherInfoPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.PublisherInfoPB";
  }
  protected:
  explicit PublisherInfoPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kComponentIDFieldNumber = 3,
    kIpAddressFieldNumber = 4,
    kIsRelayFieldNumber = 2,
    kRegistrationTimeFieldNumber = 5,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string componentID = 3;
  bool has_componentid() const;
  private:
  bool _internal_has_componentid() const;
  public:
  void clear_componentid();
  const std::string& componentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_componentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_componentid();
  PROTOBUF_NODISCARD std::string* release_componentid();
  void set_allocated_componentid(std::string* componentid);
  private:
  const std::string& _internal_componentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_componentid(const std::string& value);
  std::string* _internal_mutable_componentid();
  public:

  // optional string ipAddress = 4;
  bool has_ipaddress() const;
  private:
  bool _internal_has_ipaddress() const;
  public:
  void clear_ipaddress();
  const std::string& ipaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipaddress();
  PROTOBUF_NODISCARD std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);
  private:
  const std::string& _internal_ipaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipaddress(const std::string& value);
  std::string* _internal_mutable_ipaddress();
  public:

  // optional bool isRelay = 2;
  bool has_isrelay() const;
  private:
  bool _internal_has_isrelay() const;
  public:
  void clear_isrelay();
  bool isrelay() const;
  void set_isrelay(bool value);
  private:
  bool _internal_isrelay() const;
  void _internal_set_isrelay(bool value);
  public:

  // optional uint32 registration_time = 5;
  bool has_registration_time() const;
  private:
  bool _internal_has_registration_time() const;
  public:
  void clear_registration_time();
  uint32_t registration_time() const;
  void set_registration_time(uint32_t value);
  private:
  uint32_t _internal_registration_time() const;
  void _internal_set_registration_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gravity.PublisherInfoPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr componentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
    bool isrelay_;
    uint32_t registration_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ComponentDataLookupResponsePB_2eproto;
};
// -------------------------------------------------------------------

class ComponentDataLookupResponsePB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ComponentDataLookupResponsePB) */ {
 public:
  inline ComponentDataLookupResponsePB() : ComponentDataLookupResponsePB(nullptr) {}
  ~ComponentDataLookupResponsePB() override;
  explicit PROTOBUF_CONSTEXPR ComponentDataLookupResponsePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentDataLookupResponsePB(const ComponentDataLookupResponsePB& from);
  ComponentDataLookupResponsePB(ComponentDataLookupResponsePB&& from) noexcept
    : ComponentDataLookupResponsePB() {
    *this = ::std::move(from);
  }

  inline ComponentDataLookupResponsePB& operator=(const ComponentDataLookupResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentDataLookupResponsePB& operator=(ComponentDataLookupResponsePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentDataLookupResponsePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentDataLookupResponsePB* internal_default_instance() {
    return reinterpret_cast<const ComponentDataLookupResponsePB*>(
               &_ComponentDataLookupResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComponentDataLookupResponsePB& a, ComponentDataLookupResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentDataLookupResponsePB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentDataLookupResponsePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentDataLookupResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentDataLookupResponsePB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentDataLookupResponsePB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentDataLookupResponsePB& from) {
    ComponentDataLookupResponsePB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentDataLookupResponsePB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ComponentDataLookupResponsePB";
  }
  protected:
  explicit ComponentDataLookupResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishersFieldNumber = 2,
    kLookupIDFieldNumber = 1,
    kDomainIdFieldNumber = 3,
  };
  // repeated .gravity.PublisherInfoPB publishers = 2;
  int publishers_size() const;
  private:
  int _internal_publishers_size() const;
  public:
  void clear_publishers();
  ::gravity::PublisherInfoPB* mutable_publishers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::PublisherInfoPB >*
      mutable_publishers();
  private:
  const ::gravity::PublisherInfoPB& _internal_publishers(int index) const;
  ::gravity::PublisherInfoPB* _internal_add_publishers();
  public:
  const ::gravity::PublisherInfoPB& publishers(int index) const;
  ::gravity::PublisherInfoPB* add_publishers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::PublisherInfoPB >&
      publishers() const;

  // optional string lookupID = 1;
  bool has_lookupid() const;
  private:
  bool _internal_has_lookupid() const;
  public:
  void clear_lookupid();
  const std::string& lookupid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lookupid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lookupid();
  PROTOBUF_NODISCARD std::string* release_lookupid();
  void set_allocated_lookupid(std::string* lookupid);
  private:
  const std::string& _internal_lookupid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lookupid(const std::string& value);
  std::string* _internal_mutable_lookupid();
  public:

  // optional string domain_id = 3 [default = ""];
  bool has_domain_id() const;
  private:
  bool _internal_has_domain_id() const;
  public:
  void clear_domain_id();
  const std::string& domain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain_id();
  PROTOBUF_NODISCARD std::string* release_domain_id();
  void set_allocated_domain_id(std::string* domain_id);
  private:
  const std::string& _internal_domain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain_id(const std::string& value);
  std::string* _internal_mutable_domain_id();
  public:

  // @@protoc_insertion_point(class_scope:gravity.ComponentDataLookupResponsePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::PublisherInfoPB > publishers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lookupid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ComponentDataLookupResponsePB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublisherInfoPB

// optional string url = 1;
inline bool PublisherInfoPB::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublisherInfoPB::has_url() const {
  return _internal_has_url();
}
inline void PublisherInfoPB::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublisherInfoPB::url() const {
  // @@protoc_insertion_point(field_get:gravity.PublisherInfoPB.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublisherInfoPB::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.PublisherInfoPB.url)
}
inline std::string* PublisherInfoPB::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:gravity.PublisherInfoPB.url)
  return _s;
}
inline const std::string& PublisherInfoPB::_internal_url() const {
  return _impl_.url_.Get();
}
inline void PublisherInfoPB::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* PublisherInfoPB::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* PublisherInfoPB::release_url() {
  // @@protoc_insertion_point(field_release:gravity.PublisherInfoPB.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublisherInfoPB::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.PublisherInfoPB.url)
}

// optional bool isRelay = 2;
inline bool PublisherInfoPB::_internal_has_isrelay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublisherInfoPB::has_isrelay() const {
  return _internal_has_isrelay();
}
inline void PublisherInfoPB::clear_isrelay() {
  _impl_.isrelay_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool PublisherInfoPB::_internal_isrelay() const {
  return _impl_.isrelay_;
}
inline bool PublisherInfoPB::isrelay() const {
  // @@protoc_insertion_point(field_get:gravity.PublisherInfoPB.isRelay)
  return _internal_isrelay();
}
inline void PublisherInfoPB::_internal_set_isrelay(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.isrelay_ = value;
}
inline void PublisherInfoPB::set_isrelay(bool value) {
  _internal_set_isrelay(value);
  // @@protoc_insertion_point(field_set:gravity.PublisherInfoPB.isRelay)
}

// optional string componentID = 3;
inline bool PublisherInfoPB::_internal_has_componentid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublisherInfoPB::has_componentid() const {
  return _internal_has_componentid();
}
inline void PublisherInfoPB::clear_componentid() {
  _impl_.componentid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublisherInfoPB::componentid() const {
  // @@protoc_insertion_point(field_get:gravity.PublisherInfoPB.componentID)
  return _internal_componentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublisherInfoPB::set_componentid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.componentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.PublisherInfoPB.componentID)
}
inline std::string* PublisherInfoPB::mutable_componentid() {
  std::string* _s = _internal_mutable_componentid();
  // @@protoc_insertion_point(field_mutable:gravity.PublisherInfoPB.componentID)
  return _s;
}
inline const std::string& PublisherInfoPB::_internal_componentid() const {
  return _impl_.componentid_.Get();
}
inline void PublisherInfoPB::_internal_set_componentid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.componentid_.Set(value, GetArenaForAllocation());
}
inline std::string* PublisherInfoPB::_internal_mutable_componentid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.componentid_.Mutable(GetArenaForAllocation());
}
inline std::string* PublisherInfoPB::release_componentid() {
  // @@protoc_insertion_point(field_release:gravity.PublisherInfoPB.componentID)
  if (!_internal_has_componentid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.componentid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.componentid_.IsDefault()) {
    _impl_.componentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublisherInfoPB::set_allocated_componentid(std::string* componentid) {
  if (componentid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.componentid_.SetAllocated(componentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.componentid_.IsDefault()) {
    _impl_.componentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.PublisherInfoPB.componentID)
}

// optional string ipAddress = 4;
inline bool PublisherInfoPB::_internal_has_ipaddress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublisherInfoPB::has_ipaddress() const {
  return _internal_has_ipaddress();
}
inline void PublisherInfoPB::clear_ipaddress() {
  _impl_.ipaddress_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PublisherInfoPB::ipaddress() const {
  // @@protoc_insertion_point(field_get:gravity.PublisherInfoPB.ipAddress)
  return _internal_ipaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublisherInfoPB::set_ipaddress(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ipaddress_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.PublisherInfoPB.ipAddress)
}
inline std::string* PublisherInfoPB::mutable_ipaddress() {
  std::string* _s = _internal_mutable_ipaddress();
  // @@protoc_insertion_point(field_mutable:gravity.PublisherInfoPB.ipAddress)
  return _s;
}
inline const std::string& PublisherInfoPB::_internal_ipaddress() const {
  return _impl_.ipaddress_.Get();
}
inline void PublisherInfoPB::_internal_set_ipaddress(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ipaddress_.Set(value, GetArenaForAllocation());
}
inline std::string* PublisherInfoPB::_internal_mutable_ipaddress() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ipaddress_.Mutable(GetArenaForAllocation());
}
inline std::string* PublisherInfoPB::release_ipaddress() {
  // @@protoc_insertion_point(field_release:gravity.PublisherInfoPB.ipAddress)
  if (!_internal_has_ipaddress()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ipaddress_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipaddress_.IsDefault()) {
    _impl_.ipaddress_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublisherInfoPB::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ipaddress_.SetAllocated(ipaddress, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipaddress_.IsDefault()) {
    _impl_.ipaddress_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.PublisherInfoPB.ipAddress)
}

// optional uint32 registration_time = 5;
inline bool PublisherInfoPB::_internal_has_registration_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublisherInfoPB::has_registration_time() const {
  return _internal_has_registration_time();
}
inline void PublisherInfoPB::clear_registration_time() {
  _impl_.registration_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PublisherInfoPB::_internal_registration_time() const {
  return _impl_.registration_time_;
}
inline uint32_t PublisherInfoPB::registration_time() const {
  // @@protoc_insertion_point(field_get:gravity.PublisherInfoPB.registration_time)
  return _internal_registration_time();
}
inline void PublisherInfoPB::_internal_set_registration_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.registration_time_ = value;
}
inline void PublisherInfoPB::set_registration_time(uint32_t value) {
  _internal_set_registration_time(value);
  // @@protoc_insertion_point(field_set:gravity.PublisherInfoPB.registration_time)
}

// -------------------------------------------------------------------

// ComponentDataLookupResponsePB

// optional string lookupID = 1;
inline bool ComponentDataLookupResponsePB::_internal_has_lookupid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentDataLookupResponsePB::has_lookupid() const {
  return _internal_has_lookupid();
}
inline void ComponentDataLookupResponsePB::clear_lookupid() {
  _impl_.lookupid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentDataLookupResponsePB::lookupid() const {
  // @@protoc_insertion_point(field_get:gravity.ComponentDataLookupResponsePB.lookupID)
  return _internal_lookupid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentDataLookupResponsePB::set_lookupid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lookupid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ComponentDataLookupResponsePB.lookupID)
}
inline std::string* ComponentDataLookupResponsePB::mutable_lookupid() {
  std::string* _s = _internal_mutable_lookupid();
  // @@protoc_insertion_point(field_mutable:gravity.ComponentDataLookupResponsePB.lookupID)
  return _s;
}
inline const std::string& ComponentDataLookupResponsePB::_internal_lookupid() const {
  return _impl_.lookupid_.Get();
}
inline void ComponentDataLookupResponsePB::_internal_set_lookupid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lookupid_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentDataLookupResponsePB::_internal_mutable_lookupid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lookupid_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentDataLookupResponsePB::release_lookupid() {
  // @@protoc_insertion_point(field_release:gravity.ComponentDataLookupResponsePB.lookupID)
  if (!_internal_has_lookupid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lookupid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lookupid_.IsDefault()) {
    _impl_.lookupid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentDataLookupResponsePB::set_allocated_lookupid(std::string* lookupid) {
  if (lookupid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lookupid_.SetAllocated(lookupid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lookupid_.IsDefault()) {
    _impl_.lookupid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ComponentDataLookupResponsePB.lookupID)
}

// repeated .gravity.PublisherInfoPB publishers = 2;
inline int ComponentDataLookupResponsePB::_internal_publishers_size() const {
  return _impl_.publishers_.size();
}
inline int ComponentDataLookupResponsePB::publishers_size() const {
  return _internal_publishers_size();
}
inline void ComponentDataLookupResponsePB::clear_publishers() {
  _impl_.publishers_.Clear();
}
inline ::gravity::PublisherInfoPB* ComponentDataLookupResponsePB::mutable_publishers(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ComponentDataLookupResponsePB.publishers)
  return _impl_.publishers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::PublisherInfoPB >*
ComponentDataLookupResponsePB::mutable_publishers() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ComponentDataLookupResponsePB.publishers)
  return &_impl_.publishers_;
}
inline const ::gravity::PublisherInfoPB& ComponentDataLookupResponsePB::_internal_publishers(int index) const {
  return _impl_.publishers_.Get(index);
}
inline const ::gravity::PublisherInfoPB& ComponentDataLookupResponsePB::publishers(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ComponentDataLookupResponsePB.publishers)
  return _internal_publishers(index);
}
inline ::gravity::PublisherInfoPB* ComponentDataLookupResponsePB::_internal_add_publishers() {
  return _impl_.publishers_.Add();
}
inline ::gravity::PublisherInfoPB* ComponentDataLookupResponsePB::add_publishers() {
  ::gravity::PublisherInfoPB* _add = _internal_add_publishers();
  // @@protoc_insertion_point(field_add:gravity.ComponentDataLookupResponsePB.publishers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gravity::PublisherInfoPB >&
ComponentDataLookupResponsePB::publishers() const {
  // @@protoc_insertion_point(field_list:gravity.ComponentDataLookupResponsePB.publishers)
  return _impl_.publishers_;
}

// optional string domain_id = 3 [default = ""];
inline bool ComponentDataLookupResponsePB::_internal_has_domain_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentDataLookupResponsePB::has_domain_id() const {
  return _internal_has_domain_id();
}
inline void ComponentDataLookupResponsePB::clear_domain_id() {
  _impl_.domain_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComponentDataLookupResponsePB::domain_id() const {
  // @@protoc_insertion_point(field_get:gravity.ComponentDataLookupResponsePB.domain_id)
  return _internal_domain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentDataLookupResponsePB::set_domain_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.domain_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ComponentDataLookupResponsePB.domain_id)
}
inline std::string* ComponentDataLookupResponsePB::mutable_domain_id() {
  std::string* _s = _internal_mutable_domain_id();
  // @@protoc_insertion_point(field_mutable:gravity.ComponentDataLookupResponsePB.domain_id)
  return _s;
}
inline const std::string& ComponentDataLookupResponsePB::_internal_domain_id() const {
  return _impl_.domain_id_.Get();
}
inline void ComponentDataLookupResponsePB::_internal_set_domain_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.domain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentDataLookupResponsePB::_internal_mutable_domain_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.domain_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentDataLookupResponsePB::release_domain_id() {
  // @@protoc_insertion_point(field_release:gravity.ComponentDataLookupResponsePB.domain_id)
  if (!_internal_has_domain_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.domain_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_id_.IsDefault()) {
    _impl_.domain_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentDataLookupResponsePB::set_allocated_domain_id(std::string* domain_id) {
  if (domain_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.domain_id_.SetAllocated(domain_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_id_.IsDefault()) {
    _impl_.domain_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ComponentDataLookupResponsePB.domain_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gravity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ComponentDataLookupResponsePB_2eproto
