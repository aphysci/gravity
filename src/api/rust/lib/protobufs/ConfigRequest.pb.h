// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ConfigRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ConfigRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ConfigRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ConfigRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ConfigRequest_2eproto;
namespace gravity {
class ConfigRequestPB;
struct ConfigRequestPBDefaultTypeInternal;
extern ConfigRequestPBDefaultTypeInternal _ConfigRequestPB_default_instance_;
class ConfigeResponsePB;
struct ConfigeResponsePBDefaultTypeInternal;
extern ConfigeResponsePBDefaultTypeInternal _ConfigeResponsePB_default_instance_;
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> ::gravity::ConfigRequestPB* Arena::CreateMaybeMessage<::gravity::ConfigRequestPB>(Arena*);
template<> ::gravity::ConfigeResponsePB* Arena::CreateMaybeMessage<::gravity::ConfigeResponsePB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gravity {

// ===================================================================

class ConfigRequestPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ConfigRequestPB) */ {
 public:
  inline ConfigRequestPB() : ConfigRequestPB(nullptr) {}
  ~ConfigRequestPB() override;
  explicit PROTOBUF_CONSTEXPR ConfigRequestPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigRequestPB(const ConfigRequestPB& from);
  ConfigRequestPB(ConfigRequestPB&& from) noexcept
    : ConfigRequestPB() {
    *this = ::std::move(from);
  }

  inline ConfigRequestPB& operator=(const ConfigRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigRequestPB& operator=(ConfigRequestPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigRequestPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigRequestPB* internal_default_instance() {
    return reinterpret_cast<const ConfigRequestPB*>(
               &_ConfigRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigRequestPB& a, ConfigRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigRequestPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigRequestPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigRequestPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigRequestPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigRequestPB& from) {
    ConfigRequestPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRequestPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ConfigRequestPB";
  }
  protected:
  explicit ConfigRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIDFieldNumber = 1,
  };
  // required string componentID = 1;
  bool has_componentid() const;
  private:
  bool _internal_has_componentid() const;
  public:
  void clear_componentid();
  const std::string& componentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_componentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_componentid();
  PROTOBUF_NODISCARD std::string* release_componentid();
  void set_allocated_componentid(std::string* componentid);
  private:
  const std::string& _internal_componentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_componentid(const std::string& value);
  std::string* _internal_mutable_componentid();
  public:

  // @@protoc_insertion_point(class_scope:gravity.ConfigRequestPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr componentid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ConfigRequest_2eproto;
};
// -------------------------------------------------------------------

class ConfigeResponsePB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ConfigeResponsePB) */ {
 public:
  inline ConfigeResponsePB() : ConfigeResponsePB(nullptr) {}
  ~ConfigeResponsePB() override;
  explicit PROTOBUF_CONSTEXPR ConfigeResponsePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigeResponsePB(const ConfigeResponsePB& from);
  ConfigeResponsePB(ConfigeResponsePB&& from) noexcept
    : ConfigeResponsePB() {
    *this = ::std::move(from);
  }

  inline ConfigeResponsePB& operator=(const ConfigeResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigeResponsePB& operator=(ConfigeResponsePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigeResponsePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigeResponsePB* internal_default_instance() {
    return reinterpret_cast<const ConfigeResponsePB*>(
               &_ConfigeResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigeResponsePB& a, ConfigeResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigeResponsePB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigeResponsePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigeResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigeResponsePB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigeResponsePB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigeResponsePB& from) {
    ConfigeResponsePB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigeResponsePB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ConfigeResponsePB";
  }
  protected:
  explicit ConfigeResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string key = 1;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  const std::string& key(int index) const;
  std::string* mutable_key(int index);
  void set_key(int index, const std::string& value);
  void set_key(int index, std::string&& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  std::string* add_key();
  void add_key(const std::string& value);
  void add_key(std::string&& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key();
  private:
  const std::string& _internal_key(int index) const;
  std::string* _internal_add_key();
  public:

  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:gravity.ConfigeResponsePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ConfigRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigRequestPB

// required string componentID = 1;
inline bool ConfigRequestPB::_internal_has_componentid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigRequestPB::has_componentid() const {
  return _internal_has_componentid();
}
inline void ConfigRequestPB::clear_componentid() {
  _impl_.componentid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigRequestPB::componentid() const {
  // @@protoc_insertion_point(field_get:gravity.ConfigRequestPB.componentID)
  return _internal_componentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigRequestPB::set_componentid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.componentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ConfigRequestPB.componentID)
}
inline std::string* ConfigRequestPB::mutable_componentid() {
  std::string* _s = _internal_mutable_componentid();
  // @@protoc_insertion_point(field_mutable:gravity.ConfigRequestPB.componentID)
  return _s;
}
inline const std::string& ConfigRequestPB::_internal_componentid() const {
  return _impl_.componentid_.Get();
}
inline void ConfigRequestPB::_internal_set_componentid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.componentid_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigRequestPB::_internal_mutable_componentid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.componentid_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigRequestPB::release_componentid() {
  // @@protoc_insertion_point(field_release:gravity.ConfigRequestPB.componentID)
  if (!_internal_has_componentid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.componentid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.componentid_.IsDefault()) {
    _impl_.componentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigRequestPB::set_allocated_componentid(std::string* componentid) {
  if (componentid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.componentid_.SetAllocated(componentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.componentid_.IsDefault()) {
    _impl_.componentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ConfigRequestPB.componentID)
}

// -------------------------------------------------------------------

// ConfigeResponsePB

// repeated string key = 1;
inline int ConfigeResponsePB::_internal_key_size() const {
  return _impl_.key_.size();
}
inline int ConfigeResponsePB::key_size() const {
  return _internal_key_size();
}
inline void ConfigeResponsePB::clear_key() {
  _impl_.key_.Clear();
}
inline std::string* ConfigeResponsePB::add_key() {
  std::string* _s = _internal_add_key();
  // @@protoc_insertion_point(field_add_mutable:gravity.ConfigeResponsePB.key)
  return _s;
}
inline const std::string& ConfigeResponsePB::_internal_key(int index) const {
  return _impl_.key_.Get(index);
}
inline const std::string& ConfigeResponsePB::key(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ConfigeResponsePB.key)
  return _internal_key(index);
}
inline std::string* ConfigeResponsePB::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ConfigeResponsePB.key)
  return _impl_.key_.Mutable(index);
}
inline void ConfigeResponsePB::set_key(int index, const std::string& value) {
  _impl_.key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gravity.ConfigeResponsePB.key)
}
inline void ConfigeResponsePB::set_key(int index, std::string&& value) {
  _impl_.key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gravity.ConfigeResponsePB.key)
}
inline void ConfigeResponsePB::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gravity.ConfigeResponsePB.key)
}
inline void ConfigeResponsePB::set_key(int index, const char* value, size_t size) {
  _impl_.key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gravity.ConfigeResponsePB.key)
}
inline std::string* ConfigeResponsePB::_internal_add_key() {
  return _impl_.key_.Add();
}
inline void ConfigeResponsePB::add_key(const std::string& value) {
  _impl_.key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gravity.ConfigeResponsePB.key)
}
inline void ConfigeResponsePB::add_key(std::string&& value) {
  _impl_.key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gravity.ConfigeResponsePB.key)
}
inline void ConfigeResponsePB::add_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gravity.ConfigeResponsePB.key)
}
inline void ConfigeResponsePB::add_key(const char* value, size_t size) {
  _impl_.key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gravity.ConfigeResponsePB.key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfigeResponsePB::key() const {
  // @@protoc_insertion_point(field_list:gravity.ConfigeResponsePB.key)
  return _impl_.key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfigeResponsePB::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ConfigeResponsePB.key)
  return &_impl_.key_;
}

// repeated string value = 2;
inline int ConfigeResponsePB::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int ConfigeResponsePB::value_size() const {
  return _internal_value_size();
}
inline void ConfigeResponsePB::clear_value() {
  _impl_.value_.Clear();
}
inline std::string* ConfigeResponsePB::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:gravity.ConfigeResponsePB.value)
  return _s;
}
inline const std::string& ConfigeResponsePB::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const std::string& ConfigeResponsePB::value(int index) const {
  // @@protoc_insertion_point(field_get:gravity.ConfigeResponsePB.value)
  return _internal_value(index);
}
inline std::string* ConfigeResponsePB::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:gravity.ConfigeResponsePB.value)
  return _impl_.value_.Mutable(index);
}
inline void ConfigeResponsePB::set_value(int index, const std::string& value) {
  _impl_.value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gravity.ConfigeResponsePB.value)
}
inline void ConfigeResponsePB::set_value(int index, std::string&& value) {
  _impl_.value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gravity.ConfigeResponsePB.value)
}
inline void ConfigeResponsePB::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gravity.ConfigeResponsePB.value)
}
inline void ConfigeResponsePB::set_value(int index, const char* value, size_t size) {
  _impl_.value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gravity.ConfigeResponsePB.value)
}
inline std::string* ConfigeResponsePB::_internal_add_value() {
  return _impl_.value_.Add();
}
inline void ConfigeResponsePB::add_value(const std::string& value) {
  _impl_.value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gravity.ConfigeResponsePB.value)
}
inline void ConfigeResponsePB::add_value(std::string&& value) {
  _impl_.value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gravity.ConfigeResponsePB.value)
}
inline void ConfigeResponsePB::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gravity.ConfigeResponsePB.value)
}
inline void ConfigeResponsePB::add_value(const char* value, size_t size) {
  _impl_.value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gravity.ConfigeResponsePB.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfigeResponsePB::value() const {
  // @@protoc_insertion_point(field_list:gravity.ConfigeResponsePB.value)
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfigeResponsePB::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:gravity.ConfigeResponsePB.value)
  return &_impl_.value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gravity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ConfigRequest_2eproto
