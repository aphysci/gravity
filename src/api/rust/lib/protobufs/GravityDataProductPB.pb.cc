// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GravityDataProductPB.proto

#include "GravityDataProductPB.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gravity {
PROTOBUF_CONSTEXPR GravityDataProductPB::GravityDataProductPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dataproductid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.softwareversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.componentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.future_socket_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.received_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.future_response_)*/false
  , /*decltype(_impl_.is_cached_dataproduct_)*/false
  , /*decltype(_impl_.is_relayed_dataproduct_)*/false
  , /*decltype(_impl_.registration_time_)*/0u} {}
struct GravityDataProductPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GravityDataProductPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GravityDataProductPBDefaultTypeInternal() {}
  union {
    GravityDataProductPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GravityDataProductPBDefaultTypeInternal _GravityDataProductPB_default_instance_;
}  // namespace gravity
static ::_pb::Metadata file_level_metadata_GravityDataProductPB_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_GravityDataProductPB_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_GravityDataProductPB_2eproto = nullptr;

const uint32_t TableStruct_GravityDataProductPB_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.dataproductid_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.softwareversion_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.componentid_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.future_response_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.future_socket_url_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.received_timestamp_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.is_cached_dataproduct_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.is_relayed_dataproduct_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.type_name_),
  PROTOBUF_FIELD_OFFSET(::gravity::GravityDataProductPB, _impl_.registration_time_),
  8,
  0,
  1,
  2,
  3,
  4,
  10,
  5,
  9,
  11,
  12,
  6,
  7,
  13,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::gravity::GravityDataProductPB)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gravity::_GravityDataProductPB_default_instance_._instance,
};

const char descriptor_table_protodef_GravityDataProductPB_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032GravityDataProductPB.proto\022\007gravity\"\346\002"
  "\n\024GravityDataProductPB\022\021\n\ttimestamp\030\001 \001("
  "\004\022\025\n\rdataProductID\030\002 \001(\t\022\027\n\017softwareVers"
  "ion\030\003 \001(\t\022\014\n\004data\030\004 \001(\014\022\023\n\013componentID\030\005"
  " \001(\t\022\016\n\006domain\030\006 \001(\t\022\027\n\017future_response\030"
  "\007 \001(\010\022\031\n\021future_socket_url\030\010 \001(\t\022\032\n\022rece"
  "ived_timestamp\030\t \001(\004\022\035\n\025is_cached_datapr"
  "oduct\030\n \001(\010\022%\n\026is_relayed_dataproduct\030\013 "
  "\001(\010:\005false\022\022\n\010protocol\030\014 \001(\t:\000\022\023\n\ttype_n"
  "ame\030\r \001(\t:\000\022\031\n\021registration_time\030\016 \001(\rB="
  "\n\034com.aphysci.gravity.protobufB\033GravityD"
  "ataProductContainerH\001"
  ;
static ::_pbi::once_flag descriptor_table_GravityDataProductPB_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GravityDataProductPB_2eproto = {
    false, false, 461, descriptor_table_protodef_GravityDataProductPB_2eproto,
    "GravityDataProductPB.proto",
    &descriptor_table_GravityDataProductPB_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_GravityDataProductPB_2eproto::offsets,
    file_level_metadata_GravityDataProductPB_2eproto, file_level_enum_descriptors_GravityDataProductPB_2eproto,
    file_level_service_descriptors_GravityDataProductPB_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GravityDataProductPB_2eproto_getter() {
  return &descriptor_table_GravityDataProductPB_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GravityDataProductPB_2eproto(&descriptor_table_GravityDataProductPB_2eproto);
namespace gravity {

// ===================================================================

class GravityDataProductPB::_Internal {
 public:
  using HasBits = decltype(std::declval<GravityDataProductPB>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dataproductid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_softwareversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_componentid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_future_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_future_socket_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_received_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_cached_dataproduct(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_relayed_dataproduct(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_registration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

GravityDataProductPB::GravityDataProductPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gravity.GravityDataProductPB)
}
GravityDataProductPB::GravityDataProductPB(const GravityDataProductPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GravityDataProductPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dataproductid_){}
    , decltype(_impl_.softwareversion_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.componentid_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.future_socket_url_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.type_name_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.received_timestamp_){}
    , decltype(_impl_.future_response_){}
    , decltype(_impl_.is_cached_dataproduct_){}
    , decltype(_impl_.is_relayed_dataproduct_){}
    , decltype(_impl_.registration_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dataproductid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataproductid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dataproductid()) {
    _this->_impl_.dataproductid_.Set(from._internal_dataproductid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.softwareversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.softwareversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_softwareversion()) {
    _this->_impl_.softwareversion_.Set(from._internal_softwareversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.componentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.componentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_componentid()) {
    _this->_impl_.componentid_.Set(from._internal_componentid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.future_socket_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.future_socket_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_future_socket_url()) {
    _this->_impl_.future_socket_url_.Set(from._internal_future_socket_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_protocol()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type_name()) {
    _this->_impl_.type_name_.Set(from._internal_type_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.registration_time_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.registration_time_));
  // @@protoc_insertion_point(copy_constructor:gravity.GravityDataProductPB)
}

inline void GravityDataProductPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dataproductid_){}
    , decltype(_impl_.softwareversion_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.componentid_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.future_socket_url_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.type_name_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.received_timestamp_){uint64_t{0u}}
    , decltype(_impl_.future_response_){false}
    , decltype(_impl_.is_cached_dataproduct_){false}
    , decltype(_impl_.is_relayed_dataproduct_){false}
    , decltype(_impl_.registration_time_){0u}
  };
  _impl_.dataproductid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dataproductid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.softwareversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.softwareversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.componentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.componentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.future_socket_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.future_socket_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GravityDataProductPB::~GravityDataProductPB() {
  // @@protoc_insertion_point(destructor:gravity.GravityDataProductPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GravityDataProductPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dataproductid_.Destroy();
  _impl_.softwareversion_.Destroy();
  _impl_.data_.Destroy();
  _impl_.componentid_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.future_socket_url_.Destroy();
  _impl_.protocol_.Destroy();
  _impl_.type_name_.Destroy();
}

void GravityDataProductPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GravityDataProductPB::Clear() {
// @@protoc_insertion_point(message_clear_start:gravity.GravityDataProductPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.dataproductid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.softwareversion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.componentid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.future_socket_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.protocol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.type_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.registration_time_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.registration_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GravityDataProductPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dataProductID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dataproductid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.GravityDataProductPB.dataProductID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string softwareVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_softwareversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.GravityDataProductPB.softwareVersion");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string componentID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_componentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.GravityDataProductPB.componentID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string domain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.GravityDataProductPB.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool future_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_future_response(&has_bits);
          _impl_.future_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string future_socket_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_future_socket_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.GravityDataProductPB.future_socket_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 received_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_received_timestamp(&has_bits);
          _impl_.received_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_cached_dataproduct = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_cached_dataproduct(&has_bits);
          _impl_.is_cached_dataproduct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_relayed_dataproduct = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_relayed_dataproduct(&has_bits);
          _impl_.is_relayed_dataproduct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string protocol = 12 [default = ""];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.GravityDataProductPB.protocol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string type_name = 13 [default = ""];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.GravityDataProductPB.type_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 registration_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_registration_time(&has_bits);
          _impl_.registration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GravityDataProductPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gravity.GravityDataProductPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // optional string dataProductID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dataproductid().data(), static_cast<int>(this->_internal_dataproductid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.GravityDataProductPB.dataProductID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dataproductid(), target);
  }

  // optional string softwareVersion = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_softwareversion().data(), static_cast<int>(this->_internal_softwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.GravityDataProductPB.softwareVersion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_softwareversion(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // optional string componentID = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_componentid().data(), static_cast<int>(this->_internal_componentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.GravityDataProductPB.componentID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_componentid(), target);
  }

  // optional string domain = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.GravityDataProductPB.domain");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_domain(), target);
  }

  // optional bool future_response = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_future_response(), target);
  }

  // optional string future_socket_url = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_future_socket_url().data(), static_cast<int>(this->_internal_future_socket_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.GravityDataProductPB.future_socket_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_future_socket_url(), target);
  }

  // optional uint64 received_timestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_received_timestamp(), target);
  }

  // optional bool is_cached_dataproduct = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_cached_dataproduct(), target);
  }

  // optional bool is_relayed_dataproduct = 11 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_relayed_dataproduct(), target);
  }

  // optional string protocol = 12 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.GravityDataProductPB.protocol");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_protocol(), target);
  }

  // optional string type_name = 13 [default = ""];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type_name().data(), static_cast<int>(this->_internal_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.GravityDataProductPB.type_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_type_name(), target);
  }

  // optional uint32 registration_time = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_registration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gravity.GravityDataProductPB)
  return target;
}

size_t GravityDataProductPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gravity.GravityDataProductPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string dataProductID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dataproductid());
    }

    // optional string softwareVersion = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_softwareversion());
    }

    // optional bytes data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional string componentID = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_componentid());
    }

    // optional string domain = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional string future_socket_url = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_future_socket_url());
    }

    // optional string protocol = 12 [default = ""];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_protocol());
    }

    // optional string type_name = 13 [default = ""];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type_name());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint64 timestamp = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional uint64 received_timestamp = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_received_timestamp());
    }

    // optional bool future_response = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_cached_dataproduct = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_relayed_dataproduct = 11 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 registration_time = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_registration_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GravityDataProductPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GravityDataProductPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GravityDataProductPB::GetClassData() const { return &_class_data_; }


void GravityDataProductPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GravityDataProductPB*>(&to_msg);
  auto& from = static_cast<const GravityDataProductPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gravity.GravityDataProductPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_dataproductid(from._internal_dataproductid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_softwareversion(from._internal_softwareversion());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_componentid(from._internal_componentid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_future_socket_url(from._internal_future_socket_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_protocol(from._internal_protocol());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_type_name(from._internal_type_name());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.received_timestamp_ = from._impl_.received_timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.future_response_ = from._impl_.future_response_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_cached_dataproduct_ = from._impl_.is_cached_dataproduct_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.is_relayed_dataproduct_ = from._impl_.is_relayed_dataproduct_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.registration_time_ = from._impl_.registration_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GravityDataProductPB::CopyFrom(const GravityDataProductPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gravity.GravityDataProductPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GravityDataProductPB::IsInitialized() const {
  return true;
}

void GravityDataProductPB::InternalSwap(GravityDataProductPB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dataproductid_, lhs_arena,
      &other->_impl_.dataproductid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.softwareversion_, lhs_arena,
      &other->_impl_.softwareversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.componentid_, lhs_arena,
      &other->_impl_.componentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.future_socket_url_, lhs_arena,
      &other->_impl_.future_socket_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_name_, lhs_arena,
      &other->_impl_.type_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GravityDataProductPB, _impl_.registration_time_)
      + sizeof(GravityDataProductPB::_impl_.registration_time_)
      - PROTOBUF_FIELD_OFFSET(GravityDataProductPB, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GravityDataProductPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GravityDataProductPB_2eproto_getter, &descriptor_table_GravityDataProductPB_2eproto_once,
      file_level_metadata_GravityDataProductPB_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gravity::GravityDataProductPB*
Arena::CreateMaybeMessage< ::gravity::GravityDataProductPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gravity::GravityDataProductPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
