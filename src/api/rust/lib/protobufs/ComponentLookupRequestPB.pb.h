// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComponentLookupRequestPB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ComponentLookupRequestPB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ComponentLookupRequestPB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ComponentLookupRequestPB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ComponentLookupRequestPB_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ComponentLookupRequestPB_2eproto;
namespace gravity {
class ComponentLookupRequestPB;
struct ComponentLookupRequestPBDefaultTypeInternal;
extern ComponentLookupRequestPBDefaultTypeInternal _ComponentLookupRequestPB_default_instance_;
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> ::gravity::ComponentLookupRequestPB* Arena::CreateMaybeMessage<::gravity::ComponentLookupRequestPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gravity {

enum ComponentLookupRequestPB_RegistrationType : int {
  ComponentLookupRequestPB_RegistrationType_DATA = 0,
  ComponentLookupRequestPB_RegistrationType_SERVICE = 1
};
bool ComponentLookupRequestPB_RegistrationType_IsValid(int value);
constexpr ComponentLookupRequestPB_RegistrationType ComponentLookupRequestPB_RegistrationType_RegistrationType_MIN = ComponentLookupRequestPB_RegistrationType_DATA;
constexpr ComponentLookupRequestPB_RegistrationType ComponentLookupRequestPB_RegistrationType_RegistrationType_MAX = ComponentLookupRequestPB_RegistrationType_SERVICE;
constexpr int ComponentLookupRequestPB_RegistrationType_RegistrationType_ARRAYSIZE = ComponentLookupRequestPB_RegistrationType_RegistrationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentLookupRequestPB_RegistrationType_descriptor();
template<typename T>
inline const std::string& ComponentLookupRequestPB_RegistrationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentLookupRequestPB_RegistrationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentLookupRequestPB_RegistrationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentLookupRequestPB_RegistrationType_descriptor(), enum_t_value);
}
inline bool ComponentLookupRequestPB_RegistrationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComponentLookupRequestPB_RegistrationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentLookupRequestPB_RegistrationType>(
    ComponentLookupRequestPB_RegistrationType_descriptor(), name, value);
}
// ===================================================================

class ComponentLookupRequestPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ComponentLookupRequestPB) */ {
 public:
  inline ComponentLookupRequestPB() : ComponentLookupRequestPB(nullptr) {}
  ~ComponentLookupRequestPB() override;
  explicit PROTOBUF_CONSTEXPR ComponentLookupRequestPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentLookupRequestPB(const ComponentLookupRequestPB& from);
  ComponentLookupRequestPB(ComponentLookupRequestPB&& from) noexcept
    : ComponentLookupRequestPB() {
    *this = ::std::move(from);
  }

  inline ComponentLookupRequestPB& operator=(const ComponentLookupRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentLookupRequestPB& operator=(ComponentLookupRequestPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentLookupRequestPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentLookupRequestPB* internal_default_instance() {
    return reinterpret_cast<const ComponentLookupRequestPB*>(
               &_ComponentLookupRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComponentLookupRequestPB& a, ComponentLookupRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentLookupRequestPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentLookupRequestPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentLookupRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentLookupRequestPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentLookupRequestPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentLookupRequestPB& from) {
    ComponentLookupRequestPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentLookupRequestPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ComponentLookupRequestPB";
  }
  protected:
  explicit ComponentLookupRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComponentLookupRequestPB_RegistrationType RegistrationType;
  static constexpr RegistrationType DATA =
    ComponentLookupRequestPB_RegistrationType_DATA;
  static constexpr RegistrationType SERVICE =
    ComponentLookupRequestPB_RegistrationType_SERVICE;
  static inline bool RegistrationType_IsValid(int value) {
    return ComponentLookupRequestPB_RegistrationType_IsValid(value);
  }
  static constexpr RegistrationType RegistrationType_MIN =
    ComponentLookupRequestPB_RegistrationType_RegistrationType_MIN;
  static constexpr RegistrationType RegistrationType_MAX =
    ComponentLookupRequestPB_RegistrationType_RegistrationType_MAX;
  static constexpr int RegistrationType_ARRAYSIZE =
    ComponentLookupRequestPB_RegistrationType_RegistrationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RegistrationType_descriptor() {
    return ComponentLookupRequestPB_RegistrationType_descriptor();
  }
  template<typename T>
  static inline const std::string& RegistrationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RegistrationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RegistrationType_Name.");
    return ComponentLookupRequestPB_RegistrationType_Name(enum_t_value);
  }
  static inline bool RegistrationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RegistrationType* value) {
    return ComponentLookupRequestPB_RegistrationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLookupIDFieldNumber = 1,
    kDomainIdFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // required string lookupID = 1;
  bool has_lookupid() const;
  private:
  bool _internal_has_lookupid() const;
  public:
  void clear_lookupid();
  const std::string& lookupid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lookupid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lookupid();
  PROTOBUF_NODISCARD std::string* release_lookupid();
  void set_allocated_lookupid(std::string* lookupid);
  private:
  const std::string& _internal_lookupid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lookupid(const std::string& value);
  std::string* _internal_mutable_lookupid();
  public:

  // optional string domain_id = 3;
  bool has_domain_id() const;
  private:
  bool _internal_has_domain_id() const;
  public:
  void clear_domain_id();
  const std::string& domain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain_id();
  PROTOBUF_NODISCARD std::string* release_domain_id();
  void set_allocated_domain_id(std::string* domain_id);
  private:
  const std::string& _internal_domain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain_id(const std::string& value);
  std::string* _internal_mutable_domain_id();
  public:

  // optional .gravity.ComponentLookupRequestPB.RegistrationType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gravity::ComponentLookupRequestPB_RegistrationType type() const;
  void set_type(::gravity::ComponentLookupRequestPB_RegistrationType value);
  private:
  ::gravity::ComponentLookupRequestPB_RegistrationType _internal_type() const;
  void _internal_set_type(::gravity::ComponentLookupRequestPB_RegistrationType value);
  public:

  // @@protoc_insertion_point(class_scope:gravity.ComponentLookupRequestPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lookupid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_id_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ComponentLookupRequestPB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComponentLookupRequestPB

// required string lookupID = 1;
inline bool ComponentLookupRequestPB::_internal_has_lookupid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentLookupRequestPB::has_lookupid() const {
  return _internal_has_lookupid();
}
inline void ComponentLookupRequestPB::clear_lookupid() {
  _impl_.lookupid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentLookupRequestPB::lookupid() const {
  // @@protoc_insertion_point(field_get:gravity.ComponentLookupRequestPB.lookupID)
  return _internal_lookupid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentLookupRequestPB::set_lookupid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lookupid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ComponentLookupRequestPB.lookupID)
}
inline std::string* ComponentLookupRequestPB::mutable_lookupid() {
  std::string* _s = _internal_mutable_lookupid();
  // @@protoc_insertion_point(field_mutable:gravity.ComponentLookupRequestPB.lookupID)
  return _s;
}
inline const std::string& ComponentLookupRequestPB::_internal_lookupid() const {
  return _impl_.lookupid_.Get();
}
inline void ComponentLookupRequestPB::_internal_set_lookupid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lookupid_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentLookupRequestPB::_internal_mutable_lookupid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lookupid_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentLookupRequestPB::release_lookupid() {
  // @@protoc_insertion_point(field_release:gravity.ComponentLookupRequestPB.lookupID)
  if (!_internal_has_lookupid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lookupid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lookupid_.IsDefault()) {
    _impl_.lookupid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentLookupRequestPB::set_allocated_lookupid(std::string* lookupid) {
  if (lookupid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lookupid_.SetAllocated(lookupid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lookupid_.IsDefault()) {
    _impl_.lookupid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ComponentLookupRequestPB.lookupID)
}

// optional .gravity.ComponentLookupRequestPB.RegistrationType type = 2;
inline bool ComponentLookupRequestPB::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentLookupRequestPB::has_type() const {
  return _internal_has_type();
}
inline void ComponentLookupRequestPB::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::gravity::ComponentLookupRequestPB_RegistrationType ComponentLookupRequestPB::_internal_type() const {
  return static_cast< ::gravity::ComponentLookupRequestPB_RegistrationType >(_impl_.type_);
}
inline ::gravity::ComponentLookupRequestPB_RegistrationType ComponentLookupRequestPB::type() const {
  // @@protoc_insertion_point(field_get:gravity.ComponentLookupRequestPB.type)
  return _internal_type();
}
inline void ComponentLookupRequestPB::_internal_set_type(::gravity::ComponentLookupRequestPB_RegistrationType value) {
  assert(::gravity::ComponentLookupRequestPB_RegistrationType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void ComponentLookupRequestPB::set_type(::gravity::ComponentLookupRequestPB_RegistrationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gravity.ComponentLookupRequestPB.type)
}

// optional string domain_id = 3;
inline bool ComponentLookupRequestPB::_internal_has_domain_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentLookupRequestPB::has_domain_id() const {
  return _internal_has_domain_id();
}
inline void ComponentLookupRequestPB::clear_domain_id() {
  _impl_.domain_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComponentLookupRequestPB::domain_id() const {
  // @@protoc_insertion_point(field_get:gravity.ComponentLookupRequestPB.domain_id)
  return _internal_domain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentLookupRequestPB::set_domain_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.domain_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ComponentLookupRequestPB.domain_id)
}
inline std::string* ComponentLookupRequestPB::mutable_domain_id() {
  std::string* _s = _internal_mutable_domain_id();
  // @@protoc_insertion_point(field_mutable:gravity.ComponentLookupRequestPB.domain_id)
  return _s;
}
inline const std::string& ComponentLookupRequestPB::_internal_domain_id() const {
  return _impl_.domain_id_.Get();
}
inline void ComponentLookupRequestPB::_internal_set_domain_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.domain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentLookupRequestPB::_internal_mutable_domain_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.domain_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentLookupRequestPB::release_domain_id() {
  // @@protoc_insertion_point(field_release:gravity.ComponentLookupRequestPB.domain_id)
  if (!_internal_has_domain_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.domain_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_id_.IsDefault()) {
    _impl_.domain_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentLookupRequestPB::set_allocated_domain_id(std::string* domain_id) {
  if (domain_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.domain_id_.SetAllocated(domain_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_id_.IsDefault()) {
    _impl_.domain_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ComponentLookupRequestPB.domain_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gravity

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gravity::ComponentLookupRequestPB_RegistrationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gravity::ComponentLookupRequestPB_RegistrationType>() {
  return ::gravity::ComponentLookupRequestPB_RegistrationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ComponentLookupRequestPB_2eproto
