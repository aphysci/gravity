// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDirectoryBroadcastPB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryBroadcastPB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryBroadcastPB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceDirectoryBroadcastPB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceDirectoryBroadcastPB_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDirectoryBroadcastPB_2eproto;
namespace gravity {
class ServiceDirectoryBroadcastPB;
struct ServiceDirectoryBroadcastPBDefaultTypeInternal;
extern ServiceDirectoryBroadcastPBDefaultTypeInternal _ServiceDirectoryBroadcastPB_default_instance_;
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> ::gravity::ServiceDirectoryBroadcastPB* Arena::CreateMaybeMessage<::gravity::ServiceDirectoryBroadcastPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gravity {

// ===================================================================

class ServiceDirectoryBroadcastPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ServiceDirectoryBroadcastPB) */ {
 public:
  inline ServiceDirectoryBroadcastPB() : ServiceDirectoryBroadcastPB(nullptr) {}
  ~ServiceDirectoryBroadcastPB() override;
  explicit PROTOBUF_CONSTEXPR ServiceDirectoryBroadcastPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceDirectoryBroadcastPB(const ServiceDirectoryBroadcastPB& from);
  ServiceDirectoryBroadcastPB(ServiceDirectoryBroadcastPB&& from) noexcept
    : ServiceDirectoryBroadcastPB() {
    *this = ::std::move(from);
  }

  inline ServiceDirectoryBroadcastPB& operator=(const ServiceDirectoryBroadcastPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDirectoryBroadcastPB& operator=(ServiceDirectoryBroadcastPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceDirectoryBroadcastPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceDirectoryBroadcastPB* internal_default_instance() {
    return reinterpret_cast<const ServiceDirectoryBroadcastPB*>(
               &_ServiceDirectoryBroadcastPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceDirectoryBroadcastPB& a, ServiceDirectoryBroadcastPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceDirectoryBroadcastPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceDirectoryBroadcastPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceDirectoryBroadcastPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceDirectoryBroadcastPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceDirectoryBroadcastPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceDirectoryBroadcastPB& from) {
    ServiceDirectoryBroadcastPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDirectoryBroadcastPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ServiceDirectoryBroadcastPB";
  }
  protected:
  explicit ServiceDirectoryBroadcastPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDomainFieldNumber = 2,
    kUrlFieldNumber = 3,
    kStarttimeFieldNumber = 5,
    kRateFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string domain = 2;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // required string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // required int64 starttime = 5;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  int64_t starttime() const;
  void set_starttime(int64_t value);
  private:
  int64_t _internal_starttime() const;
  void _internal_set_starttime(int64_t value);
  public:

  // optional uint32 rate = 4;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  uint32_t rate() const;
  void set_rate(uint32_t value);
  private:
  uint32_t _internal_rate() const;
  void _internal_set_rate(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gravity.ServiceDirectoryBroadcastPB)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    int64_t starttime_;
    uint32_t rate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceDirectoryBroadcastPB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceDirectoryBroadcastPB

// optional string id = 1;
inline bool ServiceDirectoryBroadcastPB::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceDirectoryBroadcastPB::has_id() const {
  return _internal_has_id();
}
inline void ServiceDirectoryBroadcastPB::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceDirectoryBroadcastPB::id() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryBroadcastPB.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryBroadcastPB::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryBroadcastPB.id)
}
inline std::string* ServiceDirectoryBroadcastPB::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryBroadcastPB.id)
  return _s;
}
inline const std::string& ServiceDirectoryBroadcastPB::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ServiceDirectoryBroadcastPB::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryBroadcastPB::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryBroadcastPB::release_id() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryBroadcastPB.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryBroadcastPB::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryBroadcastPB.id)
}

// required string domain = 2;
inline bool ServiceDirectoryBroadcastPB::_internal_has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceDirectoryBroadcastPB::has_domain() const {
  return _internal_has_domain();
}
inline void ServiceDirectoryBroadcastPB::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServiceDirectoryBroadcastPB::domain() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryBroadcastPB.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryBroadcastPB::set_domain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryBroadcastPB.domain)
}
inline std::string* ServiceDirectoryBroadcastPB::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryBroadcastPB.domain)
  return _s;
}
inline const std::string& ServiceDirectoryBroadcastPB::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void ServiceDirectoryBroadcastPB::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryBroadcastPB::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryBroadcastPB::release_domain() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryBroadcastPB.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryBroadcastPB::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryBroadcastPB.domain)
}

// required string url = 3;
inline bool ServiceDirectoryBroadcastPB::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServiceDirectoryBroadcastPB::has_url() const {
  return _internal_has_url();
}
inline void ServiceDirectoryBroadcastPB::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServiceDirectoryBroadcastPB::url() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryBroadcastPB.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryBroadcastPB::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryBroadcastPB.url)
}
inline std::string* ServiceDirectoryBroadcastPB::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryBroadcastPB.url)
  return _s;
}
inline const std::string& ServiceDirectoryBroadcastPB::_internal_url() const {
  return _impl_.url_.Get();
}
inline void ServiceDirectoryBroadcastPB::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryBroadcastPB::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryBroadcastPB::release_url() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryBroadcastPB.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryBroadcastPB::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryBroadcastPB.url)
}

// optional uint32 rate = 4;
inline bool ServiceDirectoryBroadcastPB::_internal_has_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServiceDirectoryBroadcastPB::has_rate() const {
  return _internal_has_rate();
}
inline void ServiceDirectoryBroadcastPB::clear_rate() {
  _impl_.rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ServiceDirectoryBroadcastPB::_internal_rate() const {
  return _impl_.rate_;
}
inline uint32_t ServiceDirectoryBroadcastPB::rate() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryBroadcastPB.rate)
  return _internal_rate();
}
inline void ServiceDirectoryBroadcastPB::_internal_set_rate(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rate_ = value;
}
inline void ServiceDirectoryBroadcastPB::set_rate(uint32_t value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryBroadcastPB.rate)
}

// required int64 starttime = 5;
inline bool ServiceDirectoryBroadcastPB::_internal_has_starttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServiceDirectoryBroadcastPB::has_starttime() const {
  return _internal_has_starttime();
}
inline void ServiceDirectoryBroadcastPB::clear_starttime() {
  _impl_.starttime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ServiceDirectoryBroadcastPB::_internal_starttime() const {
  return _impl_.starttime_;
}
inline int64_t ServiceDirectoryBroadcastPB::starttime() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryBroadcastPB.starttime)
  return _internal_starttime();
}
inline void ServiceDirectoryBroadcastPB::_internal_set_starttime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.starttime_ = value;
}
inline void ServiceDirectoryBroadcastPB::set_starttime(int64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryBroadcastPB.starttime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gravity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryBroadcastPB_2eproto
