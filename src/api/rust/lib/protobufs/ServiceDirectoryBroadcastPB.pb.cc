// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDirectoryBroadcastPB.proto

#include "ServiceDirectoryBroadcastPB.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gravity {
PROTOBUF_CONSTEXPR ServiceDirectoryBroadcastPB::ServiceDirectoryBroadcastPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.starttime_)*/int64_t{0}
  , /*decltype(_impl_.rate_)*/0u} {}
struct ServiceDirectoryBroadcastPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceDirectoryBroadcastPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceDirectoryBroadcastPBDefaultTypeInternal() {}
  union {
    ServiceDirectoryBroadcastPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceDirectoryBroadcastPBDefaultTypeInternal _ServiceDirectoryBroadcastPB_default_instance_;
}  // namespace gravity
static ::_pb::Metadata file_level_metadata_ServiceDirectoryBroadcastPB_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ServiceDirectoryBroadcastPB_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ServiceDirectoryBroadcastPB_2eproto = nullptr;

const uint32_t TableStruct_ServiceDirectoryBroadcastPB_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryBroadcastPB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryBroadcastPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryBroadcastPB, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryBroadcastPB, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryBroadcastPB, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryBroadcastPB, _impl_.rate_),
  PROTOBUF_FIELD_OFFSET(::gravity::ServiceDirectoryBroadcastPB, _impl_.starttime_),
  0,
  1,
  2,
  4,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::gravity::ServiceDirectoryBroadcastPB)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gravity::_ServiceDirectoryBroadcastPB_default_instance_._instance,
};

const char descriptor_table_protodef_ServiceDirectoryBroadcastPB_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!ServiceDirectoryBroadcastPB.proto\022\007gra"
  "vity\"g\n\033ServiceDirectoryBroadcastPB\022\n\n\002i"
  "d\030\001 \001(\t\022\016\n\006domain\030\002 \002(\t\022\013\n\003url\030\003 \002(\t\022\014\n\004"
  "rate\030\004 \001(\r\022\021\n\tstarttime\030\005 \002(\003BD\n\034com.aph"
  "ysci.gravity.protobufB\"ServiceDirectoryB"
  "roadcastContainerH\001"
  ;
static ::_pbi::once_flag descriptor_table_ServiceDirectoryBroadcastPB_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ServiceDirectoryBroadcastPB_2eproto = {
    false, false, 219, descriptor_table_protodef_ServiceDirectoryBroadcastPB_2eproto,
    "ServiceDirectoryBroadcastPB.proto",
    &descriptor_table_ServiceDirectoryBroadcastPB_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_ServiceDirectoryBroadcastPB_2eproto::offsets,
    file_level_metadata_ServiceDirectoryBroadcastPB_2eproto, file_level_enum_descriptors_ServiceDirectoryBroadcastPB_2eproto,
    file_level_service_descriptors_ServiceDirectoryBroadcastPB_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ServiceDirectoryBroadcastPB_2eproto_getter() {
  return &descriptor_table_ServiceDirectoryBroadcastPB_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ServiceDirectoryBroadcastPB_2eproto(&descriptor_table_ServiceDirectoryBroadcastPB_2eproto);
namespace gravity {

// ===================================================================

class ServiceDirectoryBroadcastPB::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceDirectoryBroadcastPB>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

ServiceDirectoryBroadcastPB::ServiceDirectoryBroadcastPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gravity.ServiceDirectoryBroadcastPB)
}
ServiceDirectoryBroadcastPB::ServiceDirectoryBroadcastPB(const ServiceDirectoryBroadcastPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceDirectoryBroadcastPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    _this->_impl_.domain_.Set(from._internal_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.starttime_, &from._impl_.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rate_) -
    reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.rate_));
  // @@protoc_insertion_point(copy_constructor:gravity.ServiceDirectoryBroadcastPB)
}

inline void ServiceDirectoryBroadcastPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.domain_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.starttime_){int64_t{0}}
    , decltype(_impl_.rate_){0u}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceDirectoryBroadcastPB::~ServiceDirectoryBroadcastPB() {
  // @@protoc_insertion_point(destructor:gravity.ServiceDirectoryBroadcastPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceDirectoryBroadcastPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.url_.Destroy();
}

void ServiceDirectoryBroadcastPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceDirectoryBroadcastPB::Clear() {
// @@protoc_insertion_point(message_clear_start:gravity.ServiceDirectoryBroadcastPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.starttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rate_) -
        reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDirectoryBroadcastPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ServiceDirectoryBroadcastPB.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ServiceDirectoryBroadcastPB.domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gravity.ServiceDirectoryBroadcastPB.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rate(&has_bits);
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 starttime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_starttime(&has_bits);
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceDirectoryBroadcastPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gravity.ServiceDirectoryBroadcastPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ServiceDirectoryBroadcastPB.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required string domain = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ServiceDirectoryBroadcastPB.domain");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain(), target);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gravity.ServiceDirectoryBroadcastPB.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // optional uint32 rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rate(), target);
  }

  // required int64 starttime = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_starttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gravity.ServiceDirectoryBroadcastPB)
  return target;
}

size_t ServiceDirectoryBroadcastPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gravity.ServiceDirectoryBroadcastPB)
  size_t total_size = 0;

  if (_internal_has_domain()) {
    // required string domain = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  if (_internal_has_url()) {
    // required string url = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_starttime()) {
    // required int64 starttime = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_starttime());
  }

  return total_size;
}
size_t ServiceDirectoryBroadcastPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gravity.ServiceDirectoryBroadcastPB)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required string domain = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());

    // required string url = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required int64 starttime = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_starttime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // optional uint32 rate = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceDirectoryBroadcastPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceDirectoryBroadcastPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceDirectoryBroadcastPB::GetClassData() const { return &_class_data_; }


void ServiceDirectoryBroadcastPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceDirectoryBroadcastPB*>(&to_msg);
  auto& from = static_cast<const ServiceDirectoryBroadcastPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gravity.ServiceDirectoryBroadcastPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.starttime_ = from._impl_.starttime_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rate_ = from._impl_.rate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceDirectoryBroadcastPB::CopyFrom(const ServiceDirectoryBroadcastPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gravity.ServiceDirectoryBroadcastPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDirectoryBroadcastPB::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ServiceDirectoryBroadcastPB::InternalSwap(ServiceDirectoryBroadcastPB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.domain_, lhs_arena,
      &other->_impl_.domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceDirectoryBroadcastPB, _impl_.rate_)
      + sizeof(ServiceDirectoryBroadcastPB::_impl_.rate_)
      - PROTOBUF_FIELD_OFFSET(ServiceDirectoryBroadcastPB, _impl_.starttime_)>(
          reinterpret_cast<char*>(&_impl_.starttime_),
          reinterpret_cast<char*>(&other->_impl_.starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDirectoryBroadcastPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServiceDirectoryBroadcastPB_2eproto_getter, &descriptor_table_ServiceDirectoryBroadcastPB_2eproto_once,
      file_level_metadata_ServiceDirectoryBroadcastPB_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gravity::ServiceDirectoryBroadcastPB*
Arena::CreateMaybeMessage< ::gravity::ServiceDirectoryBroadcastPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gravity::ServiceDirectoryBroadcastPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
