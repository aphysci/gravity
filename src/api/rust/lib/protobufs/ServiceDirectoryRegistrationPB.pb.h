// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDirectoryRegistrationPB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryRegistrationPB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryRegistrationPB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceDirectoryRegistrationPB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceDirectoryRegistrationPB_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDirectoryRegistrationPB_2eproto;
namespace gravity {
class ServiceDirectoryRegistrationPB;
struct ServiceDirectoryRegistrationPBDefaultTypeInternal;
extern ServiceDirectoryRegistrationPBDefaultTypeInternal _ServiceDirectoryRegistrationPB_default_instance_;
}  // namespace gravity
PROTOBUF_NAMESPACE_OPEN
template<> ::gravity::ServiceDirectoryRegistrationPB* Arena::CreateMaybeMessage<::gravity::ServiceDirectoryRegistrationPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gravity {

enum ServiceDirectoryRegistrationPB_RegistrationType : int {
  ServiceDirectoryRegistrationPB_RegistrationType_DATA = 0,
  ServiceDirectoryRegistrationPB_RegistrationType_SERVICE = 1
};
bool ServiceDirectoryRegistrationPB_RegistrationType_IsValid(int value);
constexpr ServiceDirectoryRegistrationPB_RegistrationType ServiceDirectoryRegistrationPB_RegistrationType_RegistrationType_MIN = ServiceDirectoryRegistrationPB_RegistrationType_DATA;
constexpr ServiceDirectoryRegistrationPB_RegistrationType ServiceDirectoryRegistrationPB_RegistrationType_RegistrationType_MAX = ServiceDirectoryRegistrationPB_RegistrationType_SERVICE;
constexpr int ServiceDirectoryRegistrationPB_RegistrationType_RegistrationType_ARRAYSIZE = ServiceDirectoryRegistrationPB_RegistrationType_RegistrationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceDirectoryRegistrationPB_RegistrationType_descriptor();
template<typename T>
inline const std::string& ServiceDirectoryRegistrationPB_RegistrationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceDirectoryRegistrationPB_RegistrationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceDirectoryRegistrationPB_RegistrationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceDirectoryRegistrationPB_RegistrationType_descriptor(), enum_t_value);
}
inline bool ServiceDirectoryRegistrationPB_RegistrationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceDirectoryRegistrationPB_RegistrationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceDirectoryRegistrationPB_RegistrationType>(
    ServiceDirectoryRegistrationPB_RegistrationType_descriptor(), name, value);
}
// ===================================================================

class ServiceDirectoryRegistrationPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gravity.ServiceDirectoryRegistrationPB) */ {
 public:
  inline ServiceDirectoryRegistrationPB() : ServiceDirectoryRegistrationPB(nullptr) {}
  ~ServiceDirectoryRegistrationPB() override;
  explicit PROTOBUF_CONSTEXPR ServiceDirectoryRegistrationPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceDirectoryRegistrationPB(const ServiceDirectoryRegistrationPB& from);
  ServiceDirectoryRegistrationPB(ServiceDirectoryRegistrationPB&& from) noexcept
    : ServiceDirectoryRegistrationPB() {
    *this = ::std::move(from);
  }

  inline ServiceDirectoryRegistrationPB& operator=(const ServiceDirectoryRegistrationPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDirectoryRegistrationPB& operator=(ServiceDirectoryRegistrationPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceDirectoryRegistrationPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceDirectoryRegistrationPB* internal_default_instance() {
    return reinterpret_cast<const ServiceDirectoryRegistrationPB*>(
               &_ServiceDirectoryRegistrationPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceDirectoryRegistrationPB& a, ServiceDirectoryRegistrationPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceDirectoryRegistrationPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceDirectoryRegistrationPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceDirectoryRegistrationPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceDirectoryRegistrationPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceDirectoryRegistrationPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceDirectoryRegistrationPB& from) {
    ServiceDirectoryRegistrationPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDirectoryRegistrationPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gravity.ServiceDirectoryRegistrationPB";
  }
  protected:
  explicit ServiceDirectoryRegistrationPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceDirectoryRegistrationPB_RegistrationType RegistrationType;
  static constexpr RegistrationType DATA =
    ServiceDirectoryRegistrationPB_RegistrationType_DATA;
  static constexpr RegistrationType SERVICE =
    ServiceDirectoryRegistrationPB_RegistrationType_SERVICE;
  static inline bool RegistrationType_IsValid(int value) {
    return ServiceDirectoryRegistrationPB_RegistrationType_IsValid(value);
  }
  static constexpr RegistrationType RegistrationType_MIN =
    ServiceDirectoryRegistrationPB_RegistrationType_RegistrationType_MIN;
  static constexpr RegistrationType RegistrationType_MAX =
    ServiceDirectoryRegistrationPB_RegistrationType_RegistrationType_MAX;
  static constexpr int RegistrationType_ARRAYSIZE =
    ServiceDirectoryRegistrationPB_RegistrationType_RegistrationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RegistrationType_descriptor() {
    return ServiceDirectoryRegistrationPB_RegistrationType_descriptor();
  }
  template<typename T>
  static inline const std::string& RegistrationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RegistrationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RegistrationType_Name.");
    return ServiceDirectoryRegistrationPB_RegistrationType_Name(enum_t_value);
  }
  static inline bool RegistrationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RegistrationType* value) {
    return ServiceDirectoryRegistrationPB_RegistrationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUrlFieldNumber = 2,
    kComponentIdFieldNumber = 4,
    kDomainFieldNumber = 5,
    kIpAddressFieldNumber = 8,
    kTypeFieldNumber = 3,
    kIsRelayFieldNumber = 7,
    kTimestampFieldNumber = 6,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string component_id = 4;
  bool has_component_id() const;
  private:
  bool _internal_has_component_id() const;
  public:
  void clear_component_id();
  const std::string& component_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_id();
  PROTOBUF_NODISCARD std::string* release_component_id();
  void set_allocated_component_id(std::string* component_id);
  private:
  const std::string& _internal_component_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_id(const std::string& value);
  std::string* _internal_mutable_component_id();
  public:

  // optional string domain = 5;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional string ip_address = 8;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const std::string& ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // optional .gravity.ServiceDirectoryRegistrationPB.RegistrationType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gravity::ServiceDirectoryRegistrationPB_RegistrationType type() const;
  void set_type(::gravity::ServiceDirectoryRegistrationPB_RegistrationType value);
  private:
  ::gravity::ServiceDirectoryRegistrationPB_RegistrationType _internal_type() const;
  void _internal_set_type(::gravity::ServiceDirectoryRegistrationPB_RegistrationType value);
  public:

  // optional bool is_relay = 7;
  bool has_is_relay() const;
  private:
  bool _internal_has_is_relay() const;
  public:
  void clear_is_relay();
  bool is_relay() const;
  void set_is_relay(bool value);
  private:
  bool _internal_is_relay() const;
  void _internal_set_is_relay(bool value);
  public:

  // optional uint64 timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gravity.ServiceDirectoryRegistrationPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
    int type_;
    bool is_relay_;
    uint64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ServiceDirectoryRegistrationPB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceDirectoryRegistrationPB

// optional string id = 1;
inline bool ServiceDirectoryRegistrationPB::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceDirectoryRegistrationPB::has_id() const {
  return _internal_has_id();
}
inline void ServiceDirectoryRegistrationPB::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceDirectoryRegistrationPB::id() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryRegistrationPB.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryRegistrationPB::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryRegistrationPB.id)
}
inline std::string* ServiceDirectoryRegistrationPB::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryRegistrationPB.id)
  return _s;
}
inline const std::string& ServiceDirectoryRegistrationPB::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ServiceDirectoryRegistrationPB::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::release_id() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryRegistrationPB.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryRegistrationPB::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryRegistrationPB.id)
}

// optional string url = 2;
inline bool ServiceDirectoryRegistrationPB::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceDirectoryRegistrationPB::has_url() const {
  return _internal_has_url();
}
inline void ServiceDirectoryRegistrationPB::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServiceDirectoryRegistrationPB::url() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryRegistrationPB.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryRegistrationPB::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryRegistrationPB.url)
}
inline std::string* ServiceDirectoryRegistrationPB::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryRegistrationPB.url)
  return _s;
}
inline const std::string& ServiceDirectoryRegistrationPB::_internal_url() const {
  return _impl_.url_.Get();
}
inline void ServiceDirectoryRegistrationPB::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::release_url() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryRegistrationPB.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryRegistrationPB::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryRegistrationPB.url)
}

// optional .gravity.ServiceDirectoryRegistrationPB.RegistrationType type = 3;
inline bool ServiceDirectoryRegistrationPB::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServiceDirectoryRegistrationPB::has_type() const {
  return _internal_has_type();
}
inline void ServiceDirectoryRegistrationPB::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::gravity::ServiceDirectoryRegistrationPB_RegistrationType ServiceDirectoryRegistrationPB::_internal_type() const {
  return static_cast< ::gravity::ServiceDirectoryRegistrationPB_RegistrationType >(_impl_.type_);
}
inline ::gravity::ServiceDirectoryRegistrationPB_RegistrationType ServiceDirectoryRegistrationPB::type() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryRegistrationPB.type)
  return _internal_type();
}
inline void ServiceDirectoryRegistrationPB::_internal_set_type(::gravity::ServiceDirectoryRegistrationPB_RegistrationType value) {
  assert(::gravity::ServiceDirectoryRegistrationPB_RegistrationType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_ = value;
}
inline void ServiceDirectoryRegistrationPB::set_type(::gravity::ServiceDirectoryRegistrationPB_RegistrationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryRegistrationPB.type)
}

// optional string component_id = 4;
inline bool ServiceDirectoryRegistrationPB::_internal_has_component_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServiceDirectoryRegistrationPB::has_component_id() const {
  return _internal_has_component_id();
}
inline void ServiceDirectoryRegistrationPB::clear_component_id() {
  _impl_.component_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServiceDirectoryRegistrationPB::component_id() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryRegistrationPB.component_id)
  return _internal_component_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryRegistrationPB::set_component_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.component_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryRegistrationPB.component_id)
}
inline std::string* ServiceDirectoryRegistrationPB::mutable_component_id() {
  std::string* _s = _internal_mutable_component_id();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryRegistrationPB.component_id)
  return _s;
}
inline const std::string& ServiceDirectoryRegistrationPB::_internal_component_id() const {
  return _impl_.component_id_.Get();
}
inline void ServiceDirectoryRegistrationPB::_internal_set_component_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.component_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::_internal_mutable_component_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.component_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::release_component_id() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryRegistrationPB.component_id)
  if (!_internal_has_component_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.component_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_id_.IsDefault()) {
    _impl_.component_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryRegistrationPB::set_allocated_component_id(std::string* component_id) {
  if (component_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.component_id_.SetAllocated(component_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.component_id_.IsDefault()) {
    _impl_.component_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryRegistrationPB.component_id)
}

// optional string domain = 5;
inline bool ServiceDirectoryRegistrationPB::_internal_has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServiceDirectoryRegistrationPB::has_domain() const {
  return _internal_has_domain();
}
inline void ServiceDirectoryRegistrationPB::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ServiceDirectoryRegistrationPB::domain() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryRegistrationPB.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryRegistrationPB::set_domain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryRegistrationPB.domain)
}
inline std::string* ServiceDirectoryRegistrationPB::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryRegistrationPB.domain)
  return _s;
}
inline const std::string& ServiceDirectoryRegistrationPB::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void ServiceDirectoryRegistrationPB::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::release_domain() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryRegistrationPB.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryRegistrationPB::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryRegistrationPB.domain)
}

// optional uint64 timestamp = 6;
inline bool ServiceDirectoryRegistrationPB::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ServiceDirectoryRegistrationPB::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ServiceDirectoryRegistrationPB::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t ServiceDirectoryRegistrationPB::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t ServiceDirectoryRegistrationPB::timestamp() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryRegistrationPB.timestamp)
  return _internal_timestamp();
}
inline void ServiceDirectoryRegistrationPB::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.timestamp_ = value;
}
inline void ServiceDirectoryRegistrationPB::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryRegistrationPB.timestamp)
}

// optional bool is_relay = 7;
inline bool ServiceDirectoryRegistrationPB::_internal_has_is_relay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServiceDirectoryRegistrationPB::has_is_relay() const {
  return _internal_has_is_relay();
}
inline void ServiceDirectoryRegistrationPB::clear_is_relay() {
  _impl_.is_relay_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ServiceDirectoryRegistrationPB::_internal_is_relay() const {
  return _impl_.is_relay_;
}
inline bool ServiceDirectoryRegistrationPB::is_relay() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryRegistrationPB.is_relay)
  return _internal_is_relay();
}
inline void ServiceDirectoryRegistrationPB::_internal_set_is_relay(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_relay_ = value;
}
inline void ServiceDirectoryRegistrationPB::set_is_relay(bool value) {
  _internal_set_is_relay(value);
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryRegistrationPB.is_relay)
}

// optional string ip_address = 8;
inline bool ServiceDirectoryRegistrationPB::_internal_has_ip_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServiceDirectoryRegistrationPB::has_ip_address() const {
  return _internal_has_ip_address();
}
inline void ServiceDirectoryRegistrationPB::clear_ip_address() {
  _impl_.ip_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ServiceDirectoryRegistrationPB::ip_address() const {
  // @@protoc_insertion_point(field_get:gravity.ServiceDirectoryRegistrationPB.ip_address)
  return _internal_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDirectoryRegistrationPB::set_ip_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.ip_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gravity.ServiceDirectoryRegistrationPB.ip_address)
}
inline std::string* ServiceDirectoryRegistrationPB::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:gravity.ServiceDirectoryRegistrationPB.ip_address)
  return _s;
}
inline const std::string& ServiceDirectoryRegistrationPB::_internal_ip_address() const {
  return _impl_.ip_address_.Get();
}
inline void ServiceDirectoryRegistrationPB::_internal_set_ip_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ip_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::_internal_mutable_ip_address() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.ip_address_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceDirectoryRegistrationPB::release_ip_address() {
  // @@protoc_insertion_point(field_release:gravity.ServiceDirectoryRegistrationPB.ip_address)
  if (!_internal_has_ip_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.ip_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_address_.IsDefault()) {
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServiceDirectoryRegistrationPB::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.ip_address_.SetAllocated(ip_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_address_.IsDefault()) {
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gravity.ServiceDirectoryRegistrationPB.ip_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gravity

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gravity::ServiceDirectoryRegistrationPB_RegistrationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gravity::ServiceDirectoryRegistrationPB_RegistrationType>() {
  return ::gravity::ServiceDirectoryRegistrationPB_RegistrationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceDirectoryRegistrationPB_2eproto
